Version Control with Subversion

Chapter 1: Introduction
    1.1 What is Subversion?
        A tree of files is places into a central repository
        Repository access can be local, or across a network
        All changes to files are stored in the repository
        Can be used to store any collection of files, not just code
    1.2 Subversion's History
        CVS sucked, so some devs got together to build a better mousetrap
    1.3 Subversion's Features
        Directory Versioning
            implements a virtual versioned filesystem that tracks changes to whole directory trees
            Files and directories are versioned, not just files
        True version history
            Subversion support add, delete, copy and renaming both files and directories
            every added file starts with its own fresh history
        Atomic Commits
            A collection of modifications either goes in completely, or not at all
        Versioned metadata
            Each file and directory has a set of properties, keys and values
            Any arbitrary key/value pairs can be stored, and are versioned over time
        Choice of network layers
            Subversion can plug into apache as an extension module
            gives svn an advantage in stability
        Consistent Data Handling
            svn expresses file differences using a binary differencing algorithm
            binary and human readable files can both be stored in the repository
        Efficient branching and tagging
            Copy the project, branch the project
        Hackability
            implemented as a collection of shared C libraries with well-defined APIs
    1.4 Subversion's Architecture
        On one end is the repository, and on the other is an SVN client
    1.5 Installing Subversion
        get a binary package for your operating system
        or build from source
    1.6 Subversion's Components
        svn
            the command-line client program
        svnversion
            a program for reporting the state of a working copy
        svnlook
            a tool for inspecting a subversion repository
        svnadmin
            a tool for creating, tweaking or repairing a subversion repository
        svndumpfilter
            a program for filtering subversion repository dumpfile format streams
        mod_dav_svn
            a plug-in module for the apache http server, used to make the repository network available
        svnserve
            a custom standalone server program, runnable as a daemon or invokable over ss

Chapter 2: Basic Concepts
    2.1 The Repository
        repository stores information in the form of a filesystem tree
        any number of clients can connect to the repository
        remembers every change to the file tree
        remembers changes to the directory structure
        client have the ability to not only see present state of filesystem, but previous states
    2.2 Versioning Models
        2.2.1 The problem of File Sharing
            primary problem of versioning is multiple concurrent commits
            or conflicting commits
        2.2.2 The Lock-Modify-Unlock Solution
            many systems lock a file while it's being modified
            makes the file readonly for anyone not currently holding the lock
        2.2.3 The Copy-Modify-Merge Solution
            SVN and CVS use a copy-modify-merge solution as an alternative to locking
            conflicts are flagged and must be resolved
            all relies on user communication, facilitated by the technical solution
    2.3 Subversion in Action
        2.3.1 Working Copies
            Each user checks out a working copy
            each directory contains a .svn directory (working copy administrative directory)
            files in admin directory help SVN recognize unpublished changes, find out of date files, etc
            usually a repository holds multiple projects as subtrees
            to get a working copy, you have to check out a subtree of the repository
            this creates a private copy of the resources (no locking involved)
            SVN available in a variety of methods:
                Schema          Access method
                file://         direct repository access (local disk)
                http://         access via WebDAV protocol to SVN-aware Apache Server
                https://        same as http://, but with SSL encryption
                svn://          Access via custom protocol to an svnserve server
                svn+ssh://      same as svn:// but through an SSH tunnel
            changes are published via commit
            changes are brought down to local working copy via update
        2.3.2 Revisions
            each commit is an atomic transaction: all changes take place, or none do
            when a commit is accepted, the revision number is incremented
            each revision is a snapshot of the codebase prior to the following atomic commit
            revision numbers refer to entire file trees, not single files
        2.3.3 How Working Copies Track the Repository
            each file has two pieces of info tracked in .svn:
                what revision the working file is based on
                a timestamp recording when the local copy was last update by the repository
            given this, SVN decides whether a file is in one of four states:
                Unchanged and current
                    file unchanged in working directory, no changes have been committed to repository
                    svn commit does nothing, svn update does nothing
                Locally changed and current
                    changes have been made to the working copy, no changes to that file have been committed
                    svn commit publishes changes, svn update does nothing
                Unchanged and out of date
                    file has not been changed in the working directory, but has been changed in the repository
                    file should be updated, to make it current with the public revision
                    svn commit will do nothing, svn update will bring in most recent changes
                Locally changed and out of date
                    file has been changed in both working copy and the repository
                    svn commit will fail with an out of date error
                    file should be updated: svn update will attempt to merge public changes with local changes
                    if SVN can't resolve the conflict logically, it leaves it to the user to do so
        2.3.4 The Limitations of Mixed Revisions
            it is occasionally desirable to backdate certain portions of your codebase to a previous revision
            while it is possible to do so:
                you cannot commit the deletion of a file or directory which isn't fully up to date
                you cannot commit a metadata change to a directory unless it's fully up to date
   
Chapter 3: Guided Tour
    3.1 Help!
        get command help with svn help
        get specific help with svn help <subcommand>
    3.2 Import
        svn import brings a new project into the svn repository
    3.3 Revisions: Numbers, Keywords and Dates, Oh My!
        to specify a revision, use the --revision (-r) switch plus the revision you want
        specify a range by separating two revisions with a colon
        Example:
            svn --revision REV
            svn --revision REV1:REV2
        You can refer to revisions by number, keyword, or date
        3.3.1 Revision Numbers
            Revisions begin at 0, each successive commit increases number by 1
            when your commit completes, SVN tells you the new revision number
        3.3.2 Revision Keywords
            There are a number of keywords that svn can use to identify a revision
            use them instead of integer arguments to the --revision switch
                HEAD
                    latest revision in the repository
                BASE
                    pristine revision of an item in a working copy
                COMMITTED
                    the last revision in which an item changed before (or at) BASE
                PREV
                    the revision just before the last revision in which an item changed (COMMITTED - 1)
        3.3.3 Revision Dates
            Anywhere you can specify a revision number or keyword, you can also use a date
            dates are specified inside curly braces
            you can access a range of changes in the repository using both dates and revisions together
            Examples:
                svn checkout --revision {2002-02-17}
                svn checkout --revision {15:30}
                svn checkout --revision {"2002-02-17 15:30"}
            When you specify a date, SVN find the most recent revision of the repository as of that date
            you can also specify a range of dates:
                svn log --revision {2002-11-20}:{2002-11-29}
            or mix dates and revisions
                svn log --revision {2002-11-20}:4040
    3.4 Initial Checkout
        Checking out creates a working copy locally
        this copy contains the HEAD (latest revision) of the svn repository that you specify on the command line
        example:
            svn checkout http://svn.collab.net/repos/svn/trunk
        To move or copy things, use svn copy or svn move
    3.5 Basic Work Cycle
        Typical work cycle looks like:
            Update your working copy
                svn update
            Make Changes
                svn add
                svn delete
                svn copy
                svn move
            Examine your changes
                svn status
                svn diff
                svn revert
            Merge others' changes
                svn merge
                svn resolved
            Commit your changes
                svn commit
        3.5.1 Update your working copy
            use svn update to bring your working copy up to the latest revision
            update has output that looks like:
                U   foo.c
                U   bar.c
                Updated to revision 2.
            Codes for update are:
                U       File was UPdated (received changes from server)
                A       File was Added to your working copy
                D       File was deleted from your working copy
                R       File was replaced in your working copy--item was deleted, second item with same name added
                G       File received changes from repository, but local copy had changes as well--files merged
                C       File received conflicting changes from server--you need to resolve
        3.5.2 Make Changes to Your Working Copy
            File changes
                just make your edits--no need to involve svn other than to get the latest copy before editing
            Tree changes
                ask svn to mark files and directories for removal, addition, copy, or move
                changes may take place immediately in working copy, not in repository until commit
            Overview of four svn commands most often used to make changes:
                svn add foo
                    schedule foo to be added to the repository on next commit
                    if foo is a directory, everything under foo will be added, unless --non-recursive (-N) switch is used
                svn delete foo
                    schedule foo to be deleted from the repository
                    files are immediately removed from working copy, directories are scheduled for removal
                    deletions are just removed from current revision--the files still exist in previous revs
                svn copy foo bar
                    create a new item bar as dupe of foo--bar is scheduled for addition
                svn move foo bar
                    equivalent to svn copy foo bar; svn delete foo;
        3.5.3 Examine your changes
            it's a good idea to look over what you've changed before you commit
            3.5.3.1 svn status
                svn status will detect all changes made to the local copy
                There are a number of status codes that can be output by svn status:
                      L       svn has a lock for this file in .svn
                    M       content in file has local modifications
                     M      file has property but no content modifications
                    ?       file not under svn management
                    !       svn manages, but file is missing or incomplete
                    ~       versioned as file, but is dir, or vice versa
                    A   +   added with history of where it came from
                    M   +   moved with history and has local modifications
                    D       file scheduled for deletion
                    A       scheduled for addition
                    C       file has conflicts from an update
                        S   file or dir has been switched to a branch
                If a file is locked, you need to run svn cleanup to remove the lock
                svn status has --verbose (-V) switch, which shows the status of every item in the working copy
                verbose additionaly shows current revision number per file, last change revision, and who changed
                --show-updates switch contacts repository, adds info about what is out of date
            3.5.3.2 svn diff
                svn diff shows exactly what modifications have been made to the local copy
                uses unified diff format
                    -       removed line
                    +       added line
                svn diff produces output useful to patch, so occasionally this is useful:
                    svn diff > patchfile
                send patchfile to another dev, etc
            3.5.3.3 svn revert
                if you make changes, and need to roll back to a pre-existing revision, you can use svn revert
                by default will revert to pre-modification state by overwriting with cached pristine copy
                svn revert will also undo file addition
                svn revert ITEM is the same as deleting ITEM and running svn update -r BASE ITEM
                except that revert doesn't have to communicate with the repository to do that
        3.5.4 Resolve Conflicts (Merging Others' Changes)
            svn status -u can predict conflicts
            when there is a conflict, svn will:
                print a C during the update, and remember that the file is in conflict
                place conflict markers into the file to delineate conflicted portions
                for every conflicted file, svn will put three files into the working copy:
                    filename.mine
                        your file as it existed in your working copy before update (without conflict markers)
                    filename.rOLDREV
                        the file that was the BASE revision before you updated your working copy
                    filename.rNEWREV
                        the file that your svn client just got from the server when you updated your working copy
                        this file corresponds to the HEAD revision of the repository
                until the temporary files are removed, you cannot commit the file 'filename'
                when you get a conflict, you need to do one of three things:
                    merge the conflicted text by hand (examine and edit the conflict markers within the file)
                    copy one of the temporary files on top of your working file
                    run svn revert <filename> to thorw away all local changes
                once you've removed the conflict, run svn resolved
                svn resolved removes the temporary files and svn considers the file out of conflict
            3.5.4.1 Merging Conflicts by Hand
                a conflicted file's contents might look like:
                    blah blah blah
                    snark foo foo
                    <<<<<<< .mine
                    a witch went for a walk
                    through the woods
                    = = = = = = =
                    a child went for a swim
                    in the pool
                    >>>>>>> .r2
                    some more text here
                    and here
                lines between <<<<<<< .mine and = = = = = = = are changes in local copy
                lines between = = = = = = = and >>>>>>> .r2 are changes existing in revision 2
                you must agree on changes to check in with the other person whose revisions you're seeing
                then use svn resolved, svn commit to check changes in
            3.5.4.2 Copying a file onto your working file
                to throw out your changes, copy one of the temporary files created by subversion of the file in your working copy
                cp filename.txt.r2 filename.txt
                svn resolved filename.txt
            3.5.4.3 Punting: Using svn revert
                to throw your changes out, just use svn revert
                with that, you don't have to use svn resolved
        3.5.5 Commit your changes
            when you commit, you need to supply a log message with the --message or -m switches
            example:
                svn commit --message "corrected number of subroutines"
            alternately, get the log message from the file with the --file switch
                svn commit --file logmsg
            if you do not supply a log message, svn will launch an editor (from the environment variable $EDITOR)
    3.6 Examining History
        history commands:
            svn log
                shows broad information, log messages attached to revisions and which paths changed in each rev
            svn diff
                shows you the specific details of how a file changed over time
            svn cat
                used to retrieve any file as it existed in a particular revision number and display to screen
            svn list
                displays the files in a directory for any given revision
        3.6.1 svn log
            log messages are printed in reverse chronological order by default
            to see a range or a single, use the --revision or -r switches
            examples:   
                svn log --revision 5:19         # shows revs 5 through 19 in chron order
                svn log -r 19:5                 # shows revs 5 through 19 in reverse chron order
                svn log -r 8                    # shows log message for rev 8 only
            additionally, you can use the --verbose or -v switches to get complete revision output
        3.6.2 svn diff
            there are three uses of diff:
                examine local changes
                compare working copy to the repository
                compare repository to repository
            3.6.2.1 Examining local changes
                invoking svn diff with no switches will compare all working files in current path to cached pristine copies
            3.6.2.2 Comparing working copy to repository
                if you give a revision number, your working copy is compared to that rev in the repository
            3.6.2.3 Comparing repository to repository
                if two rev numbers are passed, you can compare those two revisions
                if you supply a url argument giving the path to the repository, you can compare revs without a working copy
        3.6.3 svn cat
            to see the entire contents of a previous revs file:
                svn cat --revision 2 file.txt
                svn cat --revision 3 file.txt > file_rev_3.txt
        3.6.4 svn list
            shows you what files are in a repository directory without actually getting the files
            to get a detailed listing, use --verbose
        3.6.5 A Final Word on History
            In addition to all previous commands, you can use svn update and svn checkout with the --revision switch
            to take an entire working copy back in time
    3.7 Other Useful Commands
        3.7.1 svn cleanup
            if a svn operation is interrupted, the log file that svn uses can get left behind on disk
            by re-executing the log files, svn can get back up to date, and the working copy can become consistent
            this is what svn cleanup does
        3.7.2 svn import
            svn import is a quick way to copy an unversioned tree of files into a repository

Chapter 4: Branching and Merging
    4.1 What's a Branch?
        a line of development that exists independently of another line, yet still shares a common history
        a branch always begins as a copy of an existing development line
    4.2 Using Branches
        when you need to make changes to the codebase in a large scale way, it may make sense to create a branch
        4.2.1 Creating a Branch
            make a copy of the project in the repository using the svn copy command
            to create a copy of /project/trunk as /project/branches/trunk_copy:
                svn copy file:///path/to/repos/project/trunk file:///path/to/repos/project/branches/trunk_copy -m "copied"
            copies are cheap--only changed files are actually copied, all others are hard links
        4.2.2 Working with Your Branch
            check out a new working copy to get your branch:
                svn checkout file:///path/to/repos/project/branches/trunk_copy localname
            checking the history of a file with svn log will show the copy as a history event
            changes made to the file in different branches will not show up to people not working with that branch
        4.2.3 The Key Concepts Behind Branches
            1: SVN branches exist as normal filesystem directories in the repository, which happen to have historical data
            2: SVN has no internal concept of a branch--only copies
    4.3 Copying Changes Between Branches
        4.3.1 Copying Specific Changes
            
