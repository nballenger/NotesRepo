// A generic type is a class or interface parameterized over types.

// Non-generic Box class that operates on any type of object:
public class Box {
  private Object object;

  public void set(Object object) { this.object = object; }
  public Object get() { return object; }
}

// Genericized version:
public class Box<T> {
  // T stands for 'type'
  private T t;

  public void set(T t) { this.t = t; }
  public T get() { return t; }
}

// Type parameter names are single, UC letters by convention.
// Most commonly used type parameter names are:
//  E - Element
//  K - Key
//  N - Number
//  T - Type
//  V - Value
//  S, U, V, etc. - 2nd, 3rd, 4th types

// Invocation
Box<Integer> integerBox;


