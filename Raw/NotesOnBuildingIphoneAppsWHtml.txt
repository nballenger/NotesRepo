Building iPhone Apps with HTML, CSS, and JavaScript
By: Jonathan Stark
Publisher: O'Reilly Media, Inc.
Pub. Date: January 19, 2010
Print ISBN-13: 978-0-596-80578-4


Chapter 1: Getting Started

1.1 Web Apps Versus Native Apps
    1.1.1 What Is a Web App?
        * Website optimized for iphone.
    1.1.2 What is a Native App?
        * Installed, with access to the hardware, written in Obj-C.
    1.1.3 Pros and Cons
        * Relevant stuff: Fast dev cycle / no hardware access.
    1.1.4 Which Approach is Right for You?
        * Blah blah blah, use PhoneGap, offline access.

1.2 Web Programming Crash Course
    1.2.1 Intro to HTML
    1.2.2 Intro to CSS
    1.2.3 Intro to JavaScript

Chapter 2: Basic iPhone Styling

2.1 First Steps
    2.1.1 Preparing a Separate iPhone Stylesheet
        * Use media queries.
    2.1.2 Controlling the Page Scaling
        * Use the meta viewport tag.

2.2 Adding the iPhone CSS
    * Styling stuff is all based on old versions of iOS.

2.3 Adding the iPhone Look and Feel
    * Use of some specific -webkit* stuff.

2.4 Adding Basic Behavior with jQuery

2.5 What You've Learned

Chapter 3: Advanced iPhone Styling

3.1 Adding a Touch of Ajax
3.2 Traffic Cop
    * Use some JS wrapper stuff to enable ajax requests.

3.3 Simple Bells and Whistles
    * Use a progress indicator.

3.4 Roll Your Own Back Button
    * JS and css to make an iphone style back button in the app itself.

3.5 Adding an Icon to the Home Screen
    * Provide an apple-touch-icon.png in the web root.
    * Refer to it with <link rel="apple-touch-icon" />

3.6 Full Screen Mode
    * Use <meta name="apple-mobile-web-app-capable" content="yes" />
    * When launched from the web clip icon, page will load full screen,
      provided you've set up ajax links. Hitting a real link loads the
      browser chrome.

    3.6.1 Changing the Status Bar
        * Use 
        
        <meta name="apple-mobile-web-app-status-bar-style" content="black" />

          to set the background color of the status bar at the top of the
          screen. It can also be set to black-translucent, which removes
          it from the document flow.
        * Changes to the status bar will only work in full screen mode.

    3.6.2 Providing a Custom Startup Graphic
        * Create a 320x460 png file and reference it with

            <link rel="apple-touch-startup-image" href="path.png" />

3.7 What You've Learned

Chapter 4: Animation
    
4.1 With a Little Help from Our Friend
4.2 Sliding Home
    * Will be building a five panel app.
    * Uses jQTouch, a jQuery plugin

4.3 Adding the Dates Panel
4.4 Adding the Date Panel
4.5 Adding the New Entry Panel
4.6 Adding the Settings Panel
4.7 Putting It All Together
4.8 Customizing jQTouch
4.9 What You've Learned

Chapter 5: Client-Side Data Storage

5.1 localStorage and sessionStorage
    * localStorage data is saved after a window is closed, is available to all
      windows or tabs loaded from the same source.
    * sessionStorage data is stored with the window object, and is discarded
      when the window is closed.
    * Setting a value:

        localStorage.setItem('age',40);
        var age = localStorage.getItem('age');
        localStorage.removeItem('age');
        localStorage.clear();

    5.1.1 Saving User Settings to localStorage
    5.1.2 Saving the Selected Date to sessionStorage
        
5.2 Client-Side Database
    * You can use relational data storage via the javascript database api.
    
    5.2.1 Creating a Database

        var db;
        $(document).ready(function() {
            var shortName = 'Kilo';
            var version = '1.0';
            var displayName = 'Kilo';
            var maxSize = 65536;
            db = openDatabase(shortName, version, displayName, maxSize);
            db.transaction(
                function(transaction) {
                    transaction.executeSql(
                        'CREATE TABLE IF NOT EXISTS entries '+
                        '  (id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, ' +
                        '   date DATE NOT NULL, ' +
                        '   food TEXT NOT NULL, ' +
                        '   calories INTEGER NOT NULL );'
                    );
                }
            );
        });
           
    5.2.2 Inserting Rows
        
        function createEntry() {
            var date = sessionStorage.currentDate;
            var calories = $('#calories').val();
            var food = $('#food').val();
            db.transaction(
                function(transaction) {
                    transaction.executeSql(
                        'INSERT INTO entries (date, calories, food) ' +
                        'VALUES (?, ?, ?);',
                        [date, calories, food],
                        function() {
                            refreshEntries();
                            jQT.goBack();
                        },
                        errorHandler
                    );
                }
            );
            return false;
        }

        5.2.2.1 Error Handling

            function errorHandler(transaction, error) {
                alert("Whoops!: " + error.code);
                return true;
            }

            * Check the W3C web database error codes.

Chapter 6: Going Offline
    * HTML5 has an offline application cache.

6.1 The Basics of the Offline Application Cache
    * You create a cache manifest file, which is a text document that's sent
      to the client with a content type of 'cache-manifest'.
    * The manifest contains a list of files that a user's device must download
      and save in order to function offline.
    * Example manifest:

        CACHE MANIFEST
        index.html
        logo.jpg
        scripts/demo.js
        styles/screen.css

    * Declaration:
        
        <html manifest="demo.manifest">

    * .htaccess or other apache declaration:

        AddType text/cache-manifest .manifest

6.2 Online Whitelist and Fallback Options
