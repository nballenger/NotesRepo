// An exception is an event that disrupts program flow.
// When an error occurs, an object is created and given to the runtime system.
// The exception object contains information about the error, and can be caught.
//
// The runtime will search upwards from the method the error occurred in for
// an exception handler to catch the exception object.
//
// 'Catch or Specify Requirement': code that may throw exceptions should either:
//  - be enclosed by a try statement that provides a handler
//  - be enclosed by a method that specifies it can throw the exception
//
// There are three kinds of exception:
//  - checked exceptions -- application should anticipate and recover from
//  - errors -- conditions external to the application, usually unrecoverable
//  - runtime exceptions -- internal to the application, usually unrecoverable

// Example try/catch/finally:

private List<Integer> list;
private static final int SIZE = 10;

PrintWriter out = null;

try {
  System.out.println("Entered try statement.");
  out = new PrintWriter(new FileWriter("Outfile.txt"));
  for (int i = 0; i < SIZE; i++) {
    out.println("Value at: " + i + " = " + list.get(i));
  }
}
catch (FileNotFoundException e) {
  System.err.println("FileNotFoundException: " + e.getMessage());
  throw new SampleException(e);
}
catch (IOException|SQLException e) {
  System.err.println("Caught IOException: " + e.getMessage());
}
finally {
  // code that always executes
}

// Example of specifying exceptions thrown by a method:

public void writeList() throws IOException, ArrayIndexOutOfBoundsException {...}
