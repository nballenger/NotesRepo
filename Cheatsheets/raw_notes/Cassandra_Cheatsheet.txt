ACID | CAP | BASE

  A - Atomicity             Transactions succeed/fail as atomic units.
  C - Consistency           When transactions complete, DB remains in valid state.
  I - Isolation             Concurrent transactions actually run serially.
  D - Durability            Data changes from transactions are permanent.

  C - Consistency           All nodes in a group see the same data concurrently.
  A - Availability          Regardless of request success, connections can be made.
  P - Partition Tolerance   Tolerance of a system to splitting into sub-clusters.

  BA  Basically Available   System will respond to any request, but may give 404.
  S - Soft state            System is always changing.
  E - Eventual Consistency  Once the system stops getting input, changes propagate.

Cassandra Terminology

  Cluster                   Two or more Cassandra instances working together.
  Homogeneous Environment   Each node has everything required for a complete cluster.
  Node                      An instance of Cassandra.
  Replication Factor        Keyspace setting for number of copies of each datum.
  Tunable Consistency       Settings:
                              ANY           1 node for successful write
                              ONE           At least one node will persist/respond.
                              QUORUM        .5N+1 nodes for read/write.
                              LOCAL_QUORUM  .5N+1 nodes in same data center for r/w.
                              EACH_QUORUM   Like QUORUM, but for each data center.
                              ALL           All nodes for read/write.

Install and Pre-requisites

  * Cassandra needs a stable Java 1.6, via JAVA_HOME and PATH
  * Make sure data directories are on a separate volume from the system volume.
  * Do not put CommitLog on same volume as system or data directories.

  Install
    * To get the binaries:

      curl -OL http://downloads.datastax.com/community/dsc.tar.gz

    * For Yum in CentOS/RHEL, make sure you have the EPEL repo set up
    * Add a Yum repo for DataStax in /etc/yum.repos.d/datastax.repo
      
      [datastax]
        name=DataStax Repo for Apache Cassandra
        baseurl=http://rpm.datastax.com/community
        enabled=1
        gpgcheck=0

    * Install and start up:

      yum install dsc12
      sudo dsc cassandra

Configuration
  
  * Conf files are in the conf dir or /etc/cassandra
  * Most config options are in cassandra.yaml
  * Most important options:
    - cluster_name
    - num_tokens: How many vnodes to assign this node.
    - initial_token: If not using vnodes, what range this node belongs to.
    - authenticator: Java class for authentication.
    - authorizer: Java class for limiting/granting permissions to objects.
    - permissions_validity_in_ms: How long to cache Authorizer permissions.
    - partitioner: Java class for partitioning data between nodes.
    - data_file_directories: default is /var/lib/cassandra
    - commitlog_directory: default is /var/lib/cassandra/commitlog
    - disk_failure_policy: default is stop--leave a node dead on disk failure
    - saved_caches_directory: default is /var/lib/cassandra/saved_caches
    - commitlog_sync: default periodic, can be batch, decides fsync policy
    - commitlog_sync_period_in_ms
    - commitlog_segment_size_in_mb
    - seed_provider: Java class to provide seeds for node autodetection
    - concurrent_reads: Default 32. Should be ~16*disks in use by data files
    - concurrent_writes: Default 32, Should be ~16*cores in the machine
    - memtable_total_space_in_mb: Flushes memtable at this number.
    - listen_address: Default localhost.

Cluster Setup
  
  * Installing and running will set up a single node cluster.
  * Multinode clusters require that new nodes be able to discover existing nodes.
  * Each new node needs to know about a "seed node", nodes that given info about
    the cluster to joining nodes.
  * Each seed node should be stable and point to other seed nodes--no seed node 
    should point to itself as its own seed.
  * Alternatively, if you give the initial_token value (number between 0 and 2^127-1)
    you can specify a node's position in the cluster. That's used on first load, then
    the 'nodetool move' command is used to change the token.
  * Once the cluster is running, nodetool can show statistics about nodes and the
    cluster itself, as for instance with 'nodetool ring'. 

Data Modeling

  * Big idea is to model the queries you will run, not the data objects in storage.
  * Cassandra gets its data distribution from Dynamo paper, data representation 
    from BigTable paper.
  * When you create a table with CQL, it looks like this:

    CREATE TABLE animals (
      name TEXT PRIMARY KEY,
      species TEXT,
      subspecies TEXT,
      genus TEXT,
      family TEXT
    );

  * The PRIMARY KEY determines how the data will be distributed across nodes.
  * PRIMARY KEY is also known as the 'partition key'.
  * If there are multiple fields in the primary key, the first field determines
    the partitioning, and subsequent keys determine how data is clustered on disk.
  * Those subsequent keys are also known as 'clustering keys'.
  * Clustering keys lets you pregroup data by the values in the keys.
  * Example of a compound key:

    CREATE TABLE animals (
      name TEXT,
      species TEXT,
      subspecies TEXT,
      genus TEXT,
      family TEXT,
      PRIMARY KEY(family, genus)
    );

  * In that example, the data will be partitioned on family, clustered on genus.
  * That means the data for each family will be stored on the same replica sets and
    presorted/clustered by the genus, which gives you very fast lookups for known 
    combinations of family and genus.

