class MyClass                           // Capital-first for class names
[ extends MySuperClass ]                // May extend one parent
[ implements YourInterface ]            // May implement multiple interfaces
{

  // Member variable declaration: protection
  [ public      |                       // class, package, subclass, world
    protected   |                       // class, package, subclass
    NO_MODIFIER |                       // class, package
    private      ]                      // class

  // Member variable declaration: static
  [ static ]                            // Declare a class variable

  // Member variable declaration: final
  [ final ]                             // Declare a constant

  // Member variable declaration: data type
  [ boolean |                           // true/false
    char    |                           // 16-bit unicode
    byte    |                           // 8-bit, signed, two's complement int
    short   |                           // 16-bit, ''
    int     |                           // 32-bit, ''
    long    |                           // 64-bit, ''
    float   |                           // 32-bit, IEEE 754 float
    double  |                           // 64-bit, ''
    CUSTOM   ]                          // User-defined type

  // Member variable declaration: member name
  myClassMember [ = expression ];       // LC-first


  // Method definition: protection
  [ PROTECTION_MODIFIER ]               // public, protected, private, none

  // Method definition: final
  [ final ]                             // cannot be overridden in subclass

  // Method definition: static
  [ static ]                            // Declare a class method

  // Method definition: return type
  [ DATA_PRIMITIVE |                    // boolean, char, byte, etc.
    CUSTOM         |                    // user-defined type
    void            ]                   // no return value for method

  // Method definition: method name
  myMethod (

  // Method declaration: argument list
  // Note: primitives passed by value, objects by reference
            [ TYPE1 ARG1, TYPE2 ARG2, ..., TYPEN ARGN ]

           ) 
  {                                     // Method body
    this.myClassMember = ARG1;          // 'this' is the current object
                                        // used when var names are shadowed

    [ return; |                         // void methods may return to break
      return someValue; ]               // other methods require return value
  }

  // Method overload

  // Constructor declaration
  public MyClass ( ARG_LIST_A ) { [ ... ] }

  // Constructor overload
  public MyClass ( ARG_LIST_B ) { [ ... ] }

  // Constructor that calls another constructor via 'this'
  public MyClass ( ARG_LIST_C ) {
    this( ARG_LIST_TYPE_B );
  }

  // Static declaration block, will run logic to initialize class vars
  static { [ ... ] }

  // Private static method as alternative to static block
  public static DATA_TYPE myVar = initializeVar();
  private static DATA_TYPE initializeVar() { [ CLASS_INITIALIZATION_CODE ] }

  // Instance variable initializer block (blank block)
  { [ INSTANCE_INITIALIZATION_CODE ] }

  // Static nested class, no access to other enclosing class members
  static class StaticNestedClass { ... }

  // Inner class, has access to even private members of outer class
  class InnerClass { ... }

  // Local class, can be defined inside any block structure
  public static void validateData() {
    class SomeDataChunk ( ARGS ) { ... }
    SomeDataChunk chunk1 = new SomeDataChunk(ARGS);
  }

  // Anonymous class, use if you only need the class once
  interface HelloWorld { public void greet(); }
  HelloWorld someGreeting = new HelloWorld() {
    public void greet() { System.out.println("Hi."); }
  }
}

