Notes on Foundation HTML5 with CSS3

Chapter 1: Getting Started

The Parts of Markup: Tags, Elements, and Attributes
    * tags appear in angle brackets
    * tag names are case insensitive, except in XHTML
    * most are in matched <tag></tag> pairs
    * Some tags are 'void elements' and self-close, like <br/>
    * 'replaced elements' are not rendered, but replaced, like img
    * 'implied elements' are generated by browsers, like tbody
    
    Attributes
        * syntax: <tag attribute="value">
        * 'minimized attribute' is one with no value, like checked
        * Also called a boolean attribute
        * XHTML requires values for all attributes
        
    Content Models
        * Elements in HTML5 are divided into 'content models', classifying elements
            by their expected contents
        * Basic content models of HTML5 are:
            - Flow content: influence the flow of other content on the page
            - Phrasing content: elements containing a few words, like <a> or <em>
            - Heading content: headings or titles
            - Sectioning content: Wrap around groups of elements to form blocks
            - Embedded content: Embed content into the page, like images or video
            - Interactive content: form fields, mostly
            - Metadata content: supply information about the document, or connect
                to other document resources like scripts or stylesheets
                
        * Block-level vs. Inline
            - Was essentially a presentational difference
            - HTML5 moved to content models
            - Still a legacy within the 'display' property of CSS
        
    Nesting Elements
    Global Attributes
        General Purpose Attributes
            * class, id, style, title, hidden
            
        Internationalization Attributes
            * dir, lang
            
        Focus Attributes
            * accesskey, tabindex
            
        Interactive Attributes (HTML5, not all browsers)
            * contenteditable -- users can edit the element's content, true|false|inherit
            * contextmenu -- associated the element with a contextual menu elsewhere
            * draggable -- indicates usable by the drag and drop api
            * dropzone -- area where draggable elements can be dropped
            * spellcheck -- true|false, related to contenteditable
            
        Custom Data Attributes
            * Custom, descriptive attributes with prefix data-
            * Stores arbitrary meta information
            * Example:
                
                <p class="product data-price="$9,799" data-product-id="V900-shrink-ray">
                    V900 Portable Shrink Ray
                </p>
                
        White Space
            * Everything ignored beyond first space, outside a pre tag
            
        Adding Comments
            * Syntax <!-- comment body -->
    
CSS Fundamentals
    
    Anatomy of a CSS Rule
        * selector { property: value; }
        
    CSS Selectors
        Universal Selector 
            * { color: blue; }
            
        Element Selector
            em { color: red; }
            
        Class Selector
            .info { color: purple; }
            
        ID Selector
            #introduction { color: green; }
            
        Pseudo-class Selector
            :link { color: blue; }
            :visited { color: purple; }
            :hover { color: green; }
            :focus { color: orange; }
            :active { color: red; }
            
        Descendant Selector
            parent child { property: value; }
            
        Combining Selectors
            parent#id child.class:pseudo { property: value; }
            selector1, selector2 { property: value; }
            
        Advanced Selectors
            Not cross browser safe
            
Specificity and the Cascade
    * A more specific selector trumps a less specific one
    
        <style>
        h2 { color: red; }
        .title { color: blue; }
        </style>
        <h2 class="title">This text is blue.</h2>
        
    * Specificity rules:
        universal < element < class/pseudo-class < id < inline styles
        
    * Cascade: rules that come later override rules earlier
    
    !important
        * In rare cases where specificity and the cascade aren't enough, !important
            case force a browser to honor that value above all others
        * Will override inline styles
        * Must appear at the end of the value, before the semicolon:
        
            h1 { color: navy !important; }
            
        * Competitions between !important properties use the cascade/specificity to decide
        * !important declarations in a user stylesheet _always_ override author sheets
        
    Formatting CSS
        * Extended:
        
            selector {
                property: value;
                property: value;
            }
            selector {
                property: value;
                property: value;
            }
        
        * Compacted:
        
            selector{property:value;property:value;}
            selector{property:value;property:value;}        

        * Semi-Compacted:
        
            selector { property: value; property: value; }
            selector { property: value; property: value; }
            
    CSS Comments
        * /* comment here */
        

Chapter 3: The Document

The Anatomy of an HTML Document
    * Basic document:
    
        <!DOCTYPE html>
        <html>
            <head>
                <meta charset="utf-8">
                <title>Document Title</title>
            </head>
            <body>
                <p>This is a simple page.</p>
            </body>
        </html>
        
    The Doctype
        * Document type declaration, or doctype
        * Informs the user agent what type of document is being read
        * Contained in angle brackets, but not really a tag--it's an instruction
        * ! at the beginning distinguishes it from any other code in the doc
        * Not case sensitive, but typically uppercase
        * In HTML before 5, doctype included the specific ruleset to follow
        * If you still need features of an old version, declare it specifically
        * <!doctype html> must be the first line of any well formatted html doc
        
        Doctype Switching and Rendering Modes
            * When a document includes a correct doctype, the browser assumes the
                entire document is well formed and authored according to the standard
            * Rendering in that is called 'compliance mode' or 'strict mode'
            * If the doctype is missing, incorrect, or incomplete, the browser will
                revert to 'quirks mode' or 'compatibility mode'
                
    The Root Element: html
        * Starting point of the document tree
        * Can have only one head and one body as children
        * Can be ommitted and the browser will generate it based on doctype
        * Should be included, should have the lang and dir attributes
        * Example:
        
            <html lang="en-US" dir="ltr">
            
        Required Attributes: none
        Optional Attributes: manifest -- the url of an application cache manifest
        
    head
        * Container for header data / meta info
        * title is required
        * Nothing but the title will actually display in the browser
        * Must be the first child of the html element
        * Should be included, but will be generated otherwise
        
        Required Attributes: none
        Optional Attributes: none
        
    title
        * Provides a text title for the document
        * One title per doc, must be present
        * Appears in the title bar of browsers, is the default name for bookmarks
        
        Required Attributes: none
        Optional Attributes: none
        
    meta
        * carries info about the document
        * With a 'name' attribute, represents document-level metadata
        * With an 'http-equiv' attribute, represents a pragma directive, which is
            info sent to the server about how the document should be served
        * With a 'charset' attribute, declares the character set for rendering the page
        * 'itemprop' attribute (html5) combines with other attributes to allow web
            authors to include user-defined metadata in their documents -- not fully 
            designed or implemented yet
        * Other than charset, meta elements are usually key/value pairs:
        
            <meta name="author" content="Jack Jackson" />
            <meta http-equiv="date" content="Thu, 15 Dec 2011 09:19:41 UTC">
            
        * http-equiv accepts very few values, name accepts most things
        * http-equiv values:
            Allow
            Content-Encoding
            Content-Language
            Content-Length
            Content-Type
            Date
            Expires
            Last-Modified
            Location
            Refresh
            Set-Cookie
            WWW-Authenticate
            
        Metadata for Search Engines
            * Lets you define your robots policy for each page
            
                <meta name="robots" content="noindex, nofollow">
                
            * Lets you include possibly useful keywords and description
            
        Attributes:
            * charset
            * content
            * http-equiv
            * name
            
    link
        * Associates the document with an external resource
        * rel attribute is required, indicates the relationship
        * href attribute gives the resoure url
        * void element, can only appear inside the head
        * Some rel values: stylesheet, alternate, icon
        * No limit to the number of link elements you can include
        
        Media Type (the type Attribute)
            * Indicates the MIME (Multipurpose Internet Mail Extensions) type of the
                linked resource
            * Type for CSS files is text/css
            * Not necessary to declare for every resource, typically comes from server
            
        The Other Media Type (The media Attribute)
            * When link links to a stylesheet, the media attribute can indicate the
                medium that stylesheet is intended to serve
            * Possible values:
                all -- suitable for all devices and media
                braille -- for braille tactile devices
                embossed -- for braille printers
                handheld -- for devices, typically with small screens
                print -- for paged, printed material, and things in print previw
                projection -- for projected presentations
                screen -- mostly color computer screens
                speech -- for speech synthesizers
                tty -- for media using a fixed-pitch character grid, like teletypes
                tv -- for televisions or television-type devices
            * Previous versions of html would only accept those values in the media attr
            * HTML5 can use a comma separated list of media queries
            * Media query consists of a media type and one or more expressions about
                the media features, like screen width, height, resolution, aspect ratio
            * Older browsers don't support, so provide separate link elements for those
            * Example:
            
                <link rel="stylesheet" href="wide.css" media="screen and (min-device-width: 600px)">
                
        Required Attributes:
            rel, href
            
        Optional Attributes:
            title, type, media, hreflang, sizes
            
    base
        * Lets you specify the base url to use for resolving any relative urls in the doc
        * requires either an href or a target attribute, or both
        
        Base URL
            * When base has an href attribute, that value acts as the base URL for the doc
            * Must be a value URL, but can be relative or absolute
            * Doesn't just apply to links--all locally relative urls will resolve through it
            
        Base target
            * A name or keyword indicating the default location (window, tab, inline frame)
                where results are displayed from links or forms that cause navigation
            * In place of a target name, some keywords can be used:
                _self -- loads into same window, is default value
                _blank -- loads into a new, unnamed browsing context
                _parent -- loads the result into the parent browsing context
                _top -- loads into the top level browsing context (ancestor with no parent)
                
        Optional Attributes: none
        
    style
        * Style information for the current document, typically CSS
        * type attribute indicates the content type of the enclosed data, typically text/css
        
        The scoped Attribute
            * Normally style elements can only appear in the head
            * in HTML5, the scoped attribute added to a style tag would let it appear in the
                body of the document, and the rules inside it will only apply to the element's
                immediate parent element and its contents
            * Most browsers currently tolerate style tags in the body
            * May be removed from the HTML5 spec--don't use it
            
        Required Attributes: none
        Optional Attributes:
            media -- valid media type or media query
            scoped -- boolean attribute
            title -- says the embedded style info is an alternative style sheet,
                may not apply to the document unless selected by the user
            type -- content type of the embedded style information
            
    script
        * Encloses a series of instructions written in a scripting language
        * Requires an end tag, may not contain any html
        * src attribute gives url of an external script file
        * type indicates the content type of the script, like text/javascript
        * script can appear in the head or the body
        
        Required Attributes: none
        Optional Attributes:
            async -- boolean that suggests browsers should execute the script asynchronously
            charset -- character encoding of an external script
            defer -- browser should defer execution until the page loads
            src -- url of the external script
            type -- content type of the external or embedded script
            
    body
        * container for all the page's contents
        * no required attributes, no special ones, can have global attributes like id/class
        

The Document Tree

Connecting CSS
    Inline Styling  -- to be avoided
    Embedded Style Sheets -- not so great
    External Style Sheets -- yay!
    The Cascade Order
        * Browsers apply rules in the order they're received
        * Cascade order for multiple style sources is:  
            1. Browser style sheet
            2. User style sheet
            3. Author style sheets (in the order linked or embedded)
            4. Inline author styles
            
Style with Color
    Color Name
    RGB -- looks like rgb(0-255, 0-255, 0-255)
    Hexadecimal -- looks like #00FF00
    RGBA -- introduced in CSS3, supported in modern browsers, gives you an alpha channel
        looks like rgba(0-255, 0-255, 0-255, 0.0-1.0)
    HSL -- Three factors: hue, saturation, lightness
        hue is the color's angle on a color wheel (0 and 360 are red)
        saturation is a measure of intensity, between 0% and 100%
        lightness is value or brightness, between 0% and 100%
        looks like hsl(0-360, 0-100%, 0-100%)
    HSLA -- same thing, with a 0.0 to 1.0 alpha channel
    
    
Chapter 4: Constructing Content
Content and Structure
    * Semantics is the inherent meaning of an element or attribute
    * Using semantic markup is good, yay
        
Logical Sections
    * Members of the sectioning content model
    
    section
        * a section of content that is thematically related
        * Example:
        
            <section class="intro">
                <h1>Welcome!</h1>
                <p>content here...</p>
            </section>
            
            <section class="news">
                <h2>Latest News</h2>
                <p>content here...</p>
            </section>
            
        * block display by default, no other default styling
        Required Attributes: none
        Optional attributes: none
        
    article
        * "represents a self-contained composition in a document, page, application, 
            or site and that is, in principle, independently distributable or reusable, 
            e.g. in syndication"
        * Example:
            
            <article>
                <h1>Where do they get those wonderful toys?</h1>
                <p>By Norm DePlume</p>
                <p>some content</p>
                <p>Posted on August 9, 2011</p>
            </article>
            
        Required Attributes: none
        Optional Attributes: none
        
    header
        * Introductory or navigational content for a section of a document
        * Typically appears at the top of a section, but doesn't have to
        * If the closest sectioning ancestor is the body, it applies to the whole doc
        * Example:
        
            <article>
                <header>
                    <h1>Where do they get those wonderful toys?</h1>
                    <p>by Norm DePlume</p>
                </header>
                
                <p>content here</p>
                <p>Posted on August 9, 2011</p>
            </article>
            
        Required Attributes: none
        Optional Attributes: none
        
    footer
        * counterpart to header, contains info about parent sectioning element
        * stuff like author contact info, copyright/licensing, supplemental nav, etc
        * Example:
        
            <article>
                <header></header>
                <p>content</p>
                <footer>
                    <p>Posted on August 9, 2011</p>
                    <p>&copy; copyright Cape and Cowl Quarterly</p>
                </footer>
            </article>
            
        Required Attributes: none
        Optional Attributes: none
        
    aside
        * a section of tangential content that supports and enhances the main content
        * optional info that could be removed without harming the reader's understanding
        * equivalent to a sidebar in publishing
        * Example:
        
            <article>
                <header></header>
                <p>content</p>
                
                <aside>
                    <p>The historic building at 616 Kriby Ave. was the former...</p>
                </aside>
                <footer></footer>
            </article>
            
        Required Attributes: None
        Optional Attributes: None
        
    nav
        * Navigation information--links, external and internal
        * only for major blocks of navigation--should be an important signpost
        * nav as child of body is global nav, otherwise sectional
        * Example:
        
            <header>
                <hgroup>
                    <h1>Power Outfitters</h1>
                    <h2>Superhero Costume and Supply Company</h2>
                </hgroup>
                
                <nav>
                    <ul>
                        <li><a href="/costuming">Costuming</a></li>
                        <li><a href="/gear">Gear</a></li>
                        <li><a href="/weaponry">Weaponry</a></li>
                        <li><a href="/defense">Defense</a></li>
                        <li><a href="/base">Base</a></li>
                    </ul>
                </nav>
            </header>
            
        Required Attributes: None
        Optional Attributes: None
        
Headings
    h1, h2, h3, h4, h5, h6
        * relative importance of headings, 1 being biggest/most, 6 being smallest/least
        
        Required Attributes: None
        Optional Attributes: None
        
    hgroup
        * Can contain a group of headings h1 to h6 that together act as a heading for a section
        * Highest level heading is taken as the section headings, others don't count towards
            the document outline--got for subtitles but not much else
        * Example:
        
            <article>
                <header>
                    <hgroup>
                        <h1>Where do they get those wonderful toys?</h1>
                        <h2>An insider's tour of the cutting edge manufacturing wing</h2>                    
                        <p>by Norm DePlume</p>
                    </hgroup>
                </header>
                <p>content</p>
                <footer></footer>
            </article>
            
        * is block level, no other styling
        * can have no children but h1 through h6
        
        Required Attributes: None
        Optional Attributes: None
        

Outlines and Sectioning Roots
    * Well structured html documents should form an orderly outline, in a hierarchy
    * User agents can use an outlining algorithm to find all headings and make an outline
    * HTML before 5 could only do so with h1 through h6 elements
    * HTML5 introduces sectioning roots
    * Can build a document tree hierarchy of sections within sections
    * None of the browsers have fully implemented the outlining algorithm yet
    
Meaningful Portions

    p
        * paragraph tag, end tag can be omitted, shouldn't be
        
        Required Attributes: None
        Optional Attributes: None but globals
        
    blockquote
        * designates a long quotation, is a flow element requiring an end tag
        * you can include the url of the original if it exists in a cite attribute
        * Example:
        
            <blockquote cite="http://www.example.com/article/this/thing">
                <p>Some stuff!</p>
            </blockquote>
            
        * Appropriate use is to only have block level children, though in html5 that's not strict
        
        Required Attributes: None
        Optional Attributes: cite, the URL of the quote's original source
        
    address
        * Meant to be contact information for the person or organization responsible for
            its parent content, or the whole document
        * More like a byline or attribution than a physical address
        * Example:
        
            <address>
                <p><a href="/people/cindy">Cindy Li</a>, Warrior Princess
                <br />1187 Hunterwasser, San Francisco, California
                <br /><a href="http://cindyli.com">cindyli.com</a></p>
            </address>
            
        Required Attributes: None
        Optional Attributes: None
        
    pre
        * Renders white space fully, no collapsing
        * Flow content, can only contain phrasing elements
        * typically set in a monospace typeface
        
        Required Attributes: None
        Optional Attributes: None
        
    hr
        * creates a horizontal rule, a dividing line between sections of content
        * largely presentational, semantic intent is to indicate a paragraph level thematic break
        * it's a replaced, void element that holds no content, and is self closing
        
        Required Attributes: None
        Optional Attributes: None
        
    div
        * General purpose division in your document, grouping related content and elements
        * Semantically neutral
        * flow content, can contain text and any other elements
        * Does not establish a new sectioning root in the document hierarchy
        * Try not to overuse as just a box to be styled
        
        Required Attributes: None
        Optional Attributes: None
        
    figure
        * New in HTML5
        * An image, video, quotation, code listing, or other content, along with optional caption,
            that is self contained and might be referenced as a single unit from the main flow of content
        * Example:
        
            <p>A domino mask covers the area around and between the eyes, and may also
                cover the eyebrows and part or all of the nose, as shown below.</p>
                
            <figure>
                <img src="images/domino-mask.jpg" alt="A hreo modeling a black and red mask.">
            </figure>
            
        * Most useful in combination with figcaption
        * Is itself a sectioning root
        
        Required Attributes: None
        Optional Attributes: None
        
    figcaption
        * A caption or legend for the other contents of its parent figure element
        * A flow element, can contain other flow elements
        * Can only be a child of figure element, must be first child or last child
        * figure can have only a single figcaption
        * Example:
            
            <figure>
                <figcaption>
                    These CSS rules will give figures and captions a bit of style
                </figcaption>
                <pre><code>
                figure {
                    padding: 10px;
                    border: 3px double #AAAAAA;
                }
                figcaption {
                    font-style: italic;
                    text-align: center;
                    padding-bottom: .5em;
                    border-bottom: 1px solid #AAAAAA;
                    margin-bottom: 1.5em;
                }
                </code></pre>
            </figure>
            
        * A figure can itself hold multiple figure elements, each with a caption
        * Lets you semantically relate a caption to an image--impossible before html5
        
        Required Attributes: None
        Optional Attributes: None
        
    iframe
        * Inline or floating frame, displays the contents of a separate document or website
        * A "nested browsing context"--browser within a browser
        * src attribute sets the url of the page to load into the frame
        * can contain text or other markup as fallback content if the browser doesn't support iframes
        * height and width can be specified as attributes, or through CSS
        * Example:
        
            <section class="news">
                <h2>Latest News</h2>
                
                <iframe src="newsfeed.html">
                    <p>We're sorry, your browser can't display this content in a frame.
                        You can still <a href="newsfeed.html">visit the page directly.</a></p>
                </iframe>
            </section>
            
        * By default, if the content overflows the box, scrollbars will be added to the iframe
        * You can turn it off with overflow: hidden in CSS
        * Optional name attribute gives a name to the iframe's browsing context
        * Optional sandbox attribute applies an extra set of restrictions to the frame's content
        * sandbox is only sparsely implemented at the moment.
        
        Required Attributes: Technically none, but without src or srcdoc it doesn't do much
        Optional Attributes:
            height: height of the frame in pixels
            name: a name for the embedded browsing context, any word not beginning with _
            sandbox: specified as an empty string, enables extra restrictions
                     can also be a space separated list of tokens that lift particular restrictions:
                        allow-same-origin: allows content to be treated as being from the
                            same origin as the containing document
                        allow-top-navigation: allows embedded browsing context to load content
                            from the top-level browsing context
                        allow-forms: allows the context to submit forms
                        allow-scripts: allows the embedded context to run scripts (but not pop up windows)
            seamless: boolean, indicates the browser should render the iframe seamlessly with
                the originating document. Not supported in any browsers at present.
            src: the url of the page to embed
            srcdoc: the content of the page that the embedded context is to contain--an entire html doc
                browsers that don't support srcdoc will default to using src if present
                
Lists
    ul
        * Unordered list, where order of the items isn't particularly important
        * Example
            
            <ul>
                <li>Thing one</li>
                <li>Thing two</li>
                <li>Thing three</li>
            </ul>
            
        Required Attributes: None
        Optional Attributes: None
        
    ol
        * Ordered list, where the order is important and should be visually indicated
        * Example
            
            <ol>
                <li>Thing one</li>
                <li>Thing two</li>
                <li>Thing three</li>
            </ol>

        Required Attributes: None
        Optional Attributes:
            type: indicates the marker to use when rendering the list. values are:
                1: decimal, arabic numerals
                a: lowercase english alphabet
                A: uppercase english alphabet
                i: lowercase roman numerals
                I: uppercase roman numerals
            start: integer indicating the number from which the list should start
            reversed: boolean, reverses the numbering order of the list--not entirely supported
            
    li
        * List item, flow item, can contain text or any flow elements including more lists
        
        Required Attributes: None
        Optional Attributes:
            value: if the li is a child of an ol element, this can specify the item's displayed number
                in the list, but doesn't change the actual list order. Must be a whole integer, and
                subsequent items will continue the numbering after a previous item's value
                
    dl
        * List of items and descriptions, in dt and dd tags
        * Used to be called 'definition list', now called 'description list'
        
        Required Attributes: None
        Optional Attributes: None
        
    dt
        * a description term or sequence of terms is associated with every description that follows
            it until a new dt element appears to begin a new sequence, or until dl closes
            
        Required Attributes: None
        Optional Attributes: None
        
    dd
        * A description of the dt element or elements that immediately precede it
        * For multiple descriptions for a single term, use one dd tag per description
        
        Required Attributes: None
        Optional Attributes: None
        
Phrasing Elements
    Emphasis and Importance: em and strong
        * em adds emphasis to a word or phrase, is typically displayed as italicized
        * strong adds strong emphasis to highlight words or phrases of greater importance, is usually bold
        
        Required Attributes: None
        Optional Attributes: None
        
    time
        * Added in HTML5, represents either a precise time on a 24 hour clock or a specific date(time)
        * Standardizes the way dates and times are marked up, so browsers and apps can detect them
        * Dates in a time element must follow a specific format that scripts and user-agents can interpret
        * YYYY-MM-DD for dates, HH:MM (in 24 hour time) for times
        * The datetime attribute can carry the specific date or time in machine readable format
        * Examples:
        
            <time>2012-05-05</time> at <time>08:00</time>
            <time datetime="2012-05-05">Saturday, May 5</time> at <time datetime="08:00">8 am</time>
            <time datetime="2012-05-05T15:35:42-07:00">Sat. May 5, 2012, 3:35 pm Pacific</time>
            
        Required Attributes: None
        Optional Attributes: datetime--precise date and or time with optional time zone offset
        
    mark
        * highlights a segment of text for reference, to indicate its relevance in some other context
        * imports no further semantic meaning to its contents, only marks it as a passage of interest
        * the equivalent of marking a passage in a blockquote, along the lines of "emphasis added"
        * Example:
        
            <blockquote>
                <p>Before you do that thing, remember <mark>to do the other thing</mark> first</p>
            </blockquote>
            
        * Doesn't always have default styling, but when it does it's usually yellow highlighting
        
        Required Attributes: None
        Optional Attributes: None
        
    cite
        * Designates the title of a quoted or referenced work
        * Originally intended for any cited resource, including people's names
        * redefined in html5 to expressly forbid it for the names of people or other entities
        * ONLY refers to the titles of cited works
        * But that's dumb and not semantically reasonable, so don't sweat it.
        * Example
        
            <p>Famed reporter <cite>Norm DePlume</cite> had this to say:</p>
            
            <blockquote cite="http://example.com">
                <p>blah blah blah</p>
            </blockquote>
            
            <p class="source"><cite>Where do they get those wonderful toys?</cite>,
                <cite>Cape and Cowl Quarterly</cite>, August 9, 2011</p>
                
        Required Attributes: None
        Optional Attributes: None
        
    q
        * Short, inline quotations
        * May have a cite attribute for the url of the source
        * Default display outside of IE before 8 is to add quotes automatically, so don't do it yourself
        
        Required Attributes: None
        Optional Attributes: cite -- the url of the quotation's original source
        
    dfn
        * The defining instance of a term, especially one that may reoccur throughout the document
        * Example:
        
            <p>blah blah blah about a <dfn title="a giant fish">whale</dfn></p>
            
        Required Attributes: None
        Optional Attributes: None
        
    abbr
        * Shortened form of a longer word or phrase, includes acronyms as of html5
        * use similarly to dfn to point out the defining instance of an abbreviation
        * can and usually should include a title attribute giving the expanded version
        * Example:
        
            <p>After the <abbr title="Electro-Magnetic Pulse">EMP</abbr> ...</p>
            
        Required Attributes: None
        Optional Attributes: None
        
    small
        * Indicates a side note or fine print relating to the main text
        * Indicates supplemental content, not de-emphasized content
        
        Required Attributes: None
        Optional Attributes: None
        
    span
        * generic phrase element to set apart an arbitrary segment of text
        
        Required Attributes: None
        Optional Attributes: None
        
    Programming: code, kbd, samp, and var
        * code is computer code, but not programming language specific--any non human-language content
        * kbd is text or commands that should be entered by the user
        * samp illustrates sample output of a program or script
        * var designates a programming variable or argument, or a variable in a mathematical expression
        
        Required Attributes: None
        Optional Attributes: None
        
    Revisions: del and ins
        * del is deleted text, ins is inserted
        
        Required Attributes: None
        Optional Attributes:
            cite -- the url of a document featuring information on why the change was made
            datetime -- the date and or time the change to the document was made
            
    Offset Text: i, b, u, and s
        * Essentially stylistic, but with semantic meaning as 'offset text'
        * offset text is a word or phrase that is different from the surrounding text for a reason
        * Only use them when they really are the most appropriate for the content
        * i is a word or phrase in an alternate voice, like a few words in a foreign language, or
            a technical name, or a character's inner monologue
        * b calls attention to a word or phrase, but doesn't imply the greater importance that strong does
        * b might be used to mark the key words in a summary, leading sentence in an article
        * u underlines text, can be used for marking text with non-textual annotations such as proper
            names in chinese text, or for marking misspelled words
        * s indicates text that is no longer accurate or no longer relevant, like an old price
        
        Required Attributes: None
        Optional Attributes: None
        
    Superscript and Subscript: sup and sub
        * Does superscript and subscript, more meaningful than a span
        
        Required Attributes: None
        Optional Attributes: None

    Text Annotations: ruby, rp, and rt
        * ruby text is a pronunciation guide in logographic languages like chinese, japanes, and korean
        * ruby element indicates a word or phrase that includes ruby text annotations
        * rt indicates each annotation
        * Not supported by all browsers yet
        * rp element indicates ruby parentheses, which are hidden in browsers that support ruby/rt
        
        Required Attributes: None
        Optional Attributes: None

    Bidirectional Text: bdi and bdo
        * bdi is bidirectional isolate, which isolates a portion of text so it can be automatically
            formatted in a direction different from the text surrounding it
        * bdo is bidirectional override, which defines a segment of text where the direction is
            explicitly reversed from the direction of the text that surrounds it (as inherited from parent)
            
        Required Attributes: bdo requires a 'dir' attribute, may be 'ltr' or 'rtl'
        Optional Attributes: None
            
    Line breaks: br and wbr
        * br creates a line break to wrap text--it's a void element with no content
        * wbr is a line break opportunity--a place where the text _can_ break if it needs to
            not supported in older browsers, as it's new to HTML5--also a void element
            
        Required Attributes: None
        Optional Attributes: None

Special Characters
    Yeah yeah, we know.
    
Styling Content with CSS
    Establishing New Elements
        * Add this to your default stylesheet to make sure you cover non HTML5 browsers:
        
            section, article, aside, header, footer, nav, hgroup, figure, figcaption {
                display: block;
            }
            
    The IE Problem
        * IE has a list of elements it recognizes, and if an element isn't on that list then
            IE will refuse to style it at all.
        * IE before 9 didn't recognize the HTML5 elements like section, article, etc
        * However, you can add elements to the DOM with javascript, and it will style them:
        
            <script>document.createElement("article");</script>
            
        * the HTML5 shiv library will do it all for you if you put it in the head of pages
        
    Declaring Base Font Styles
        * CSS pre-3 used only the built in fonts you had on your machine
        * CSS3 gives you the @font-face rule, that embeds a third party font in a style sheet
        
    Font Family
        * A 'typeface' consists of a set of variations on a single type design--italic, bold, etc.
        * Font family is declared using the font-family property, followed by a comma separated list
            of desired typefaces in order of preference
        * Example:
        
            body { font-family: Georgia, "Times New Roman", Times, serif; }
            
        * Generic font families:
            serif, sans-serif, monospace, cursive, fantasy
            
    Font Size
        * Example:
            
            body { font-size: 14px; }
            
        * Can be given in pixels as an integer
        * Can be given as a percentage of the inherited size
        * Can be given in any of the following:
            pixels, millimeters, centimeters, inches, points, picas, ems, exes, rems, percentage
        * Can also use keywords:
            xx-small, x-small, small, medium, large, x-large, xx-large
        * And relative keywords:
            smaller, larger
            
    Line Height
        * Height of a line of text measured from the baseline to the baseline of the preceding line
        * Different from 'leading', which is added space between two lines
        * Example:
        
            body { line-height: 1.5; }
            
        * Can be a unit of measure, or a proportion of the element's font-size
        
    Shorthand for Fonts
        * font-weight can be bold, light, or normal
        * font-style can be normal, italc, or oblique
        * font-variant specifies normal text or small caps
        * All can be condensed into a single 'font' property
        * 'font' requires values for font-size and font-family or it won't work
        * Example:
        
            body { font: 14px/1.5 "Trebuchet MS", Helvetica, Arial, sans-serif; }
            h5 { font: small-caps italic bold 100% "Trebuchet MS", sans-serif; }
            
    Heading Hierarchy
        * Headings decrease in size from h1 to h6
        * Some browsers support size changes for headings in nested sections
        * You can enforce that behavior with a reset:
        
            h1 { font-size: 200%; }
            h2 { font-size: 150%; }
            h3 { font-size: 120%; }
            h4 { font-size: 100%; }
            
            h2, section h1 { font-size: 150%; }
            h3, section h2, section section h1 { font-size: 120%; }
            h4, section h3, section section h2 { font-size: 100%; }
            
        * Could expand that pattern indefinitely, but better to use a class or id--use the least
            specific selector possible to do the job you're doing
            
Styling Lists
    Changing Unordered List Markers
        * Example:
        
            ul { list-style-type: square; }
            
        * Can be: disc, circle, square, none
        
    Using an Image as a List Marker
        * Example:
        
            ul { list-style-image: url("images/bullet.png"); }
            
        * Images should be small and no taller than the text size
        
    Changing the Style of Ordered Lists
        * list-style-type for ordered lists can be: 
            decimal, upper-roman, lower-roman, upper-alpha, lower-alpha, none
            

Chapter 5: Embedding Media

How Digital Images Work
    * Stuff about vector images, jpeg, gif, png
    
Embedding Images
    * Images can be embedded with the img or object elements, but strictly decorative 
        stuff should be done in CSS
        
    img
        * Replaced element, not rendered itself, has no content (void)
        * Requires a src attribute to pull in a resource, and alt text for if the image fails
        * Example:
        
            <img src="superhero.jpg" alt="A superhero" />
        
        Required Attributes:
            src - the url of the graphic file on the server
            alt - alternate text to display if the image load fails
            
        Optional Attributes:
            width - width in pixels
            height - height in pixels
            ismap - declares that the image is used for a server side image map
            usemap - identifies a client-side image map to be used
            crossorigin - specifies that the image file may or may not be served from other
                domains. Can be set to 'anonymous' (default), or 'use-credentials'
                
        The alt Attribute
            * Gives alternate text when the image can't be seen or isn't available
            * No explicit character limit, but convention is 1024 characters, preferably <256
            * Use the alt text to describe the image, the title image as tooltip data
            
        The width and height Attributes
            * If you give them, the browser will know what space to reserve for rendering
            * CSS width and height will override attribute values
            
        The usemap and ismap Attributes
            * usemap tells it what map to use when rendering a client-side image map
            * ismap says it's a serverside image map, which you should avoid
            
        Obsolete Presentational Attributes
            * Invalid: align, border, hspace, vspace
            
Embedding Audio and Video
    * Previously this required a plug-in
    * HTML5 introduces <audio> and <video>, lets authors embed sound and moving images into
        web pages without requiring plugins
    * The browser must be able to play the media, so you should provide fallback content
    * Format support is somewhat unpredictable
    
    Media Codecs and Formats
        * Many codecs are proprietary, so you don't get them in open source browsers
        * Once media is encoded, it has to be encapsulated in a format
        * Those are the files, encoded data written in a format, that are passed program to program
        * Embedded media must be served with the proper content type for each format
        
    audio
        * Embeds a sound file or audio stream in a web page
        * Replaced, but not void--can contain other element(s), requires an end tag
        * Requires an src attribute:
        
            <audio src="audio/thwip.mp3"></audio>
            
        * By default, has no display properties at all, and is invisible
        * Exists in the document, can be accessed by JS, but does nothing
        * The boolean 'controls' attribute tells the browser to display a native control bar
        * You get a javascript api through the audio element, and can build your own controls
        * boolean attributes 'autoplay' and 'loop' do what they say
        * The preload attribute accepts the values auto, metadata, or none
            auto leaves it up to the browser to determine whether it starts downloading before playing
            metadata fetches only the file's metadata, but not the sound itself
            none tells it to preload nothing (this is the default)
        * Most popular audio format is mp3 (MPEG Layer 3), which is patent encumbered
        * Safari, Chrome, and IE will play MP3, FF and Opera won't
        * Ogg Vorbis is free and open, supported by FF, Opera, and Chrome, but not Safari or IE
        * To reach the majority of users, you need to offer audio in at least two formats
        * <audio> can contain one or more <source> elements, and a browser will play the first it can:
        
            <audio controls preload="none">
                <source src="audio/thooom.ogg" type="audio/ogg">
                <source src="audio/thooom.mp3" type="audio/mpeg">
            </audio>
            
        * That still doesn't work for older browsers that can't handle the audio element
        * For them you can give a flash fallback:
        
            <audio controls preload="none">
                <source src="audio/thooom.ogg" type="audio/ogg">
                <source src="audio/thooom.mp3" type="audio/mpeg">
                <object data="flash/audio-player.swf?soundFile=audio/thooom.mp3"
                  width="250" height="25" type="application/x-shockwave-flash">
                    <param name="movie" value="flash/player.swf?soundFile=audio/thooom.mp3">
                </object>
            </audio>
            
        * For browsers without HTML5 audio or flash, you can do:
            </audio>
           
            <audio controls preload="none">
                <source src="audio/thooom.ogg" type="audio/ogg">
                <source src="audio/thooom.mp3" type="audio/mpeg">
                <object data="flash/audio-player.swf?soundFile=audio/thooom.mp3"
                  width="250" height="25" type="application/x-shockwave-flash">
                    <param name="movie" value="flash/player.swf?soundFile=audio/thooom.mp3">
                    
                    <p>Download this audio in either
                    <a href="audio/thooom.mp3">MP3</a> or
                    <a href="audio/thooom.ogg">Ogg</a> format.</p>
                </object>
            </audio>
           
        * Browsers that do support <audio> but don't find a format will _not_ fall back on the flash
        
        Required Attributes: None, though should have src or <source>
        Optional Attributes:
            src - url of the audio file or stream
            controls - boolean, invokes the browser's native player
            preload - suggests downloading audio before user plays it, can be auto, metadata, none
            autoplay - boolean, autoplays content on page load
            mediagroup - can associate multiple media elements with a single media controller object
            loop: boolean that repeats the audio
            muted - audio defaults to a muted state when it loads
            crossorigin - video or audio can be loaded from other domains, can be anonymous or use-credentials
            
    video
        * Embeds a digital video in a web page, similar to the audio element
        * Can include the url of the video file or stream in a src attribute
        * controls attribute invokes the browser's native control bar
        * Has a js api so you can build your own controls
        * Can contain one or more source elements, each pointing to a different video source
        * Three leading video formats are MP4, Ogg Theora, and WebM
        * Safari, IE, and Chrome support MP4
        * FF, Opera, Chrome support both Ogg Theora and WebM
        * To reach the widest audience:
        
            <video controls>
                <source src="video/laserblast.webm" type="video/webm">
                <source src="video/laserblast.ogb" type="video/ogg">
                <source src="video/laserblast.mp4" type="video/mp4">
            </video>
            
        * Can have a preload attribute similar to audio--only preload if you're certain users will play it
        * Unless you autoplay, you can use the poster attribute to give a placeholder image
        * You can offer a flash based fallback player, and direct download links
        
        Required Attributes: None, though should have src or source
        Optional Attributes:
            src - url of the video
            poster - url of an image to use before playing
            controls - boolean, show browser default controls
            width - width of the video in pixels
            height - height in pixels
            preload - suggest whether to preload or not
            autoplay - boolean, sets autoplay or not
            mediagroup - name of associated media elements that this belongs to
            loop - boolean, plays on loop
            muted - boolean, sets to mute by default
            crossorigin - specifies the video file or stream may or may not be served
                from other domains, can be 'anonymous' or 'use-credentials'
                
    source
        * Specifies the address of an embedded media resource
        * void element, can't hold content, has no end tag
        * Requires a src attribute
        * Can only be a child of audio or video elements, should come before any other flow content
        * Should include a type attribute with the mime type of the content
        * You can include the specific codec the media uses:
        
            <audio controls>
                <source src="audio/thwip.ogg" type="audio/ogg;codec=vorbis">
                <source src="audio/thwip.mp3" type="audio/mpeg;codec=mpga">
            </audio>
            
        * Videos usually have two tracks n the same container file, one video and one audio
        * They use different codecs, and a browser has to support both to play the whole thing
        * Including both codecs in the type attribute is good, but should be wrapped in double quotes:
        
            <video controls>
                <source src="video/blah.webm" type='video/webm;codecs="vp8,vorbis"'>
                <source src="video/blah.ogv" type='video/ogg;codecs="theora,vorbis"'>
                <source src="video/blah.mp4" type='video/mpeg;codecs="avc1.42E01E,mp4a.40.2"'>
            </video>
            
        * You can also add a media attribute to source elements, setting the media type it should display on
        
        Required Attributes:
            src - the url where the media file resides on a web server
        Optional Attributes:
            type - MIME type and optionally the codec(s)
            media - output media or devices, a comma separated list of valid media queries
            
    track
        * Specifies the address of an external timed text track for a media element (audio or video)
        * Can give accessible captions or subtitles, text descriptions, annotations, or metadata
        * Not supported in browsers yet
        * Void element with no end tag, can only be a child of audio or video elements
        * Should come after all source elements inside an audio or video element
        
            <video controls>
                <source src="video/blah.ogv" type="video/ogg">
                <source src="video/blah.mp4" type="video/mpeg">
                
                <track kind="subtitles" src="video/tracks/blah.vtt" srclang="en"
                    label="English subtitles" default>
            </video>
            
        * If there are multiple track elements, one should get the default attribute
        * Different kinds of tracks: subtitles, captions, descriptions, chapters, metadata
        
        Required Attributes: src - url of the text track data
        Optional Attributes:
            kind - one of subtitles, captions, descriptions, chapters, or metadata
            srclang - language of the text track, specified by a valid language tag
            label - human readable title for the text track
            default - indicates the text track for the media element when there is more than one
            

Embedding Plugins and Other Content
    * Mechanisms for embedding external content, for things a browser can't do natively
    
    object
        * embeds a file or type of media that is external to the document
        * could be an image, video, audio, or an HTML page, though those have native tags
        * Commonly used to embed content that requires a separate plugin to render, like flash or java
        * Requires an end tag, may have one or more param elements, followed by any other flow content
        * If the embedded content fails, the nested content is displayed as a fallback
        * Pattern where an audio element is nested inside a flash embed, as fallback:
        
            <object data="flash/audio-player.swf?soundFile=audio/Townsville.mp3"
              width="250" height="25" type="application/x-shockwave-flash">
                <param name="movie" value="flash/audio-player.swf?soundFile=audio/Townsville.mp3">
                <param name="allowscriptaccess" value="always">
                <param name="menu" value="false">
                <param name="wmode" value="transparent">
                
                <audio controls>
                    <source src="audio/Townsville.mp3" type='audio/mpeg;codec=mpeg'>
                    <source src="audio/Townsville.ogg" type='audio/ogg;codec=vorbis'>
                    <p>Download this in <a href="audio/Townsville.mp3">MP3</a> or 
                        <a href="audio/Townsville.ogg">Ogg Vorbis</a> format.</p>
                </audio>
            </object>
            
        Required Attributes: None, though a data attribute is usually used to give the resource's address
        Optional Attributes:
            data - url of the external resource to embed
            type - content type of the embedded resource
            name - object's browsing context
            form - specifies the id of the form element the object is associated with
            width - with in pixels
            height - height in pixels
            usemap - identifies a client-side image map to be used, if it's an image
            typemustmatch - boolean, says the resource in the data attribute MUST match the
                content type specified in the type attribute
                
    param
        * Appears inside an object to define various object parameters and pass on additional information
        * Can only appear as a child of the object tag
        * Void element, no contents, requires a name and usually has a value
        * Usage depends entirely on the object you're embedding
        
        Required Attributes: name - the name of the parameter
        Optional Attributes: value - the value of the parameter
        
    embed
        * "An integration point for an external (typically non-HTML) application or interactive content"
        * Embeds content that requires a plugin
        * Similar to object, but embed is a void element that can't hold contents, so you can't give fallback
        * If the browser lacks the plugin, the embed element doesn't do anything at all
        * Example:
            
            <embed src="video/feature.mp4" type="video/mp4" width="394" height="298">
            
        * The video element is a much better way to embed videos
        * You can use embed inside a video or audio element to give fallback options for older browsers
        * Supported because so many people used it, but object is better
        
        Required Attributes: None, though src is usually required to give the resource's address
        Optional Attributes:
            src - the url of the external resource to embed
            type - mime type of the embedded content
            width - width in pixels
            height - height in pixels
            
Dynamic Drawings
    
    canvas
        * Creates an empty drawing area for dynamically generated imagery
        * Default rendering is 300x150 pixels, though you give width and height in pixels
        * Older browsers may not recognize it, and only new browsers support the JS methods on the canvas obj
        * Fallback content should be some usable replacement content
        * Can be styled similarly to any other element, though CSS won't effect the drawings
        * Drawbacks include being entirely JS dependent, and drawings being pixel art, not DOM elements
        
        Required Attributes: None
        Optional Attributes: width and height
        
Images with Style, Styling with Images

    Wrapping Text Around an Image
        * In early HTML, you made text flow around images with 'align', now you do it with CSS float
        * float takes one of three values: left, right, or none
        * A floated element will shift as far to one side as possible, until it comes up against
            the edge of its containing block (or until it collides with another floating element)
        * Any text or elements after the floated element will flow upward around it
        * 'none' is most useful for overriding any float properties that were granted earlier
        * Example:
        
            <style>
            .avatar { float: left; }
            </style>
            
            <p><img src="images/avatar.jpg" alt="" class="avatar">
            Blah blah blah.
            </p>
            
        * To create spacing around a floated element:
            
            .avatar {
                float: left;
                margin-right: 1em;
                margin-bottom: .5em;
            }
            
        * You can float almost any element in HTML 
        
    Background Images
        * With CSS's background-image property you can add decorative images to your page
        * Almost any element can have a background image, and then element contents will overlay that
        * Image tiles in both directions by default
        * CSS rule that will apply a background image to the body element:
        
            body { background-image: url(images/background.png); }
            
        * The background-repeat property lets you set the tiling, can be repeat, repeat-x, repeat-y, no-repeat 
        * background-color lets you set a color for behind hte background image
        
    Positioning a Background Image
        * background-position lets you set the start point for tiling
        * Takes two values: a horizontal and a vertical
        * You can give values for it in a few ways: keywords, lengths, and percentages
        * Keywords are left, center, right / top, center, bottom
        * Length is just any unit of measure
        * Percentages mean you need to factor in the size of the image--the reference point is moved
            in both the containing element and the background image, so starting at 50% starts at half 
            the size of the container, but also half the size of the element, so it ends up in true center
        * If you give bg image placement in non percentage lengths, it will measure from the
            upper left corner of the element to the upper left corner of the bg image
            
    Shorthand for Backgrounds
        * Combined 'background' property lets you give everything at once
        * Example:
        
            .intro {
                background: #E6F2F9 url(images/background.png) 94% 20px no-repeat;
            }
            
        * Order of the values doesn't matter, with the exception of background position
        * Anything not declared falls back on a default value
        * A later background property will override an earlier one, including setting undeclared
            properties to their defaults
        * Use specific properties to override a background rule rather than another background declaration  
        
Chapter 6: Linking the Web

Anchors

    a
        * Anchor element for hyperlinks
        * Was previously restricted to phrasing content model (inline)
        * HTML5 lets the anchor do flow/block content
        * Few restrictions exist on the element in HTML5
        * Must have a start and end tag, cannot be the child of another anchor or a button
        * Example of a placeholder hyperlink:
        
            <a>A placeholder hyperlink</a>
            
        The href Attribute
            * Short for hypertext reference
            * Value must be a url
            * Example of an anchor element with an href attribute:
            
                <a href="index.html">Back to homepage</a>
                
        Required Attributes: None
        Optional Attributes:
            href - a url defining the destination of the hyperlink
            rel - a space separated list of tokens describing the destination document's
                relationship to the current document
            type - the MIME type of the hyperlink's destination
            target - a name or keyword for the browsing context to load when following
            media - defines the media for which the linked document was designed
            hreflang - language of the linked document
            
    URLs
        * Absolute and relative
        
    The rel attribute
        * Common rel attribute values:
            alternate - linked doc is an alternate version of the current doc
            stylesheet - linked document is a stylesheet for the current doc (use link instead)
            nofollow - author of current document does not endorse linked document, and
                search engines may not follow the link
            license - linked document contains info about the copyright or ownership of current doc
            next or prev - linked doc is the next or previous doc in an ordered series
            tag - link represents a tag that applies to the current document
            
    Au revoir, rev attribute
        * was the opposite of rel--described an external doc's relationship to the current doc
        
    The type attribute
        * must match a valid MIME type
        
    Inline vs. Block-level Links
        * Links have a 'transparent content model', meaning that depending on context the
            element can contain phrasing content or flow content
        * If the anchor is the child of an element that can only contain phrasing content,
            the anchor can only contain phrasing content
        * Example of phrasing content:
        
            <a href="index.html><em>Go</em> back to our <strong>homepage</strong>!</a>
            
        * Example of flow content:
        
            <a href="utility-belts.html">
                <h3>Utility belts</h3>
                <p>For all of your utility belting needs!</p>
            </a>
            
Image Maps
    * Define one or more clickable regions within an image that can be linked to other documents
        or portions of the same document
    * Best suited for conveying visual information--a clickable world map, for intsance
    * Use with care, easy to misuse image maps, creating a bad interactive experience
    
    map
        * Defines an image map
        * Must have a start tag and an end tag, display defaults to inline, so won't disturb flow
        * Essentially hidden from view--browsers set height and width to zero
        * May contain phrasing or flow content, content model is transparent
        * Most basic example:
        
            <map name="crime-map"></map>
            
        * Associated with an img element:
        
            <img src="crime-map.jpg" alt="Crime Map" usemap="#crime-map">
            <map name="crime-map"></map>
            
        * Value of 'usemap' MUST begin with a hash character
        
        Required Attributes: name - gives the map a name allowing for association with an image
        Optional Attributes: None other than globals, though the id attribute if used must
            be exactly the same as the value of the name attribute
            
    area
        * Represents an area on an image map
        * If href is given, area is clickable, otherwise it's a dead region of the map
        * Void elements, with no end tag, may be self closing
        * Must always be a descendant of the map element, though does not need to
            be an immediate child of map
            
        Required Attributes: None
        Optional Attributes
            shape and coords - the shape of the area element and coordinates of that shape
                will accept default, rect, circle, polygon
            href - url that when present makes the area a clickable hyperlink
            alt - defines fallback content for the area, must be present if href is
            media, rel, type, target, hreflang - same as for a elements
            
        The shape and coords attributes
            * Example:
            
                <map name="crime-map" id="crime-map">
                    <area href="crime-junction.html" alt="Crime Junction" />
                </map>
                
            Rectangles:
            
                <area shape="rect" coords="10,5,100,50" />
                
                * coords are top left and bottom right in two pairs
                
            Circles:
            
                <area shape="circle" coords="50,30,20" />
                
                * coords are from-left, from-top, and radius
                
            Polygons
                
                <area shape="poly" coords="20,30,100,30,80,60,0,60" />
                
                * Must include at least three coordinate pairs, number of integers must be even
                
Styling Anchors and Image Maps with CSS

    Styling Anchors
        * Example:
        
            a:link {
                background: #DDD;
                color: #CC0000;
                font-weight: bold;
                text-decoration: none;
            }
            
    Keeping it pseudo-classy
        * Pseudo classes are:
            a:link          any hyperlink
            a:visited       visited hyperlink
            a:hover         currently being hovered by the mouse
            a:focus         has keyboard focus
            a:active        is current in mousedown state
            
    Button-making
        * Example of styling an anchor to look like a clickable button:
        
            a {
                border: 3px solid #111111;
                background: #666666 url("arrow.png") no-repeat 15px 50%;
                color: #FFFFFF;
                display: inline-block;
                font-family: Helvetica, Arial, sans-serif;
                font-size: 15px;
                padding: 15px 20px 15px 45px;
                text-shadow: 1px 1px 0, #000000;
                text-decoration: none;
            }
            
            a:hover {
                background-color: #555555;
                border-color: #FFFFFF;
                border-style: dashed;
            }
            
            a:active {
                background-color: #CC9999;
                border-color: #CC0000;
                padding: 16px 19px 14px 46px;
            }
            
        * Setting the display property to 'inline-block' lets an element have properties
            similar to that of a block level element while still displaying inline and adjacent
            to other content, so you can add margin, padding, width, height, etc
            
Chapter 7: Building Tables

The Table's Lament
    * They got overused.
    
    table
        * markup element for tabular data
        * organized with rows and columns like a spreadsheet
        * Example:
        
            <table>
                <tr>
                    <td>Blah</td>
                </tr>
            </table>
            
        Required Attributes: None
        Optional Attributes: border - indicates table is not being used for layout, value is "" or 1
        
    tr
        * a table row
        
        Required Attributes: None
        Optional Attributes: None
        
    td
        * A cell of table data
        
        Required Attributes: None
        Optional Attributes: 
            colspan - a positive integer for the number of adjacent columns to span
            rowspan - a positive integer for the number of adjacent rows to span
            headers - a space separated list of unique ids referencing th elements with those
                ids that act as headers for the table cell
                
    th
        * Headers that describe columns or rows
        
        Required Attributes: None
        Optional Attributes
            scope - an enumerated attribute defining the scope of a table header:
                row - heading applies to some of the succeeding cells in the same row
                col - heading applies to some of the succeeding cells in the same column
                rowgroup - heading applies to the remaining cells in the same row
                colgroup - heading applies to the remaining cells in the same column
                auto - table heading applies to a set of cells based on context (default value)
            colspan - positive integer for number of cols to span
            rowspan - positive integer for number of rows to span
            headers - space separated list of unique ids referencing th elements with those ids
            
        Settng scope
            * Indicates for non-visual readers the purpose of the header
            
Table Row Groups
    * Increase the semantic value of tables, and make tables more accessible
    * All must be direct children of their parent table element
    
    thead
        * table heading row group, contains row or rows that are column headings for the parent

        Required Attributes: None
        Optional Attributes: None
        
    tbody
        * table row group, one or more rows making up the body of data of its parent table element
        * may only have tr elements as its children
        * can be multiple tbody elements within a single table
        * if there are multiples, they must all be siblings
                
        Required Attributes: None
        Optional Attributes: None

    tfoot
        * row or rows representing column summaries for its parent table element
        * only one per table
        * may be after any caption, colgroup, and thead but before tbody or tr, or after everything
        
        Required Attributes: None
        Optional Attributes: None

    * Example of all three:
    
        <table>
            <thead>
                <tr>
                    <th scope="col">Product</th>
                    <th scope="col">Quantity</th>
                </tr>
            </thead>
            <tfoot>
                <tr>
                    <th scope="row">Totals</th>
                    <td>659</td>
                </tr>
            </tfoot>
            <tbody>
                <tr>
                    <th scope="row">Belts</th>
                    <td>9</td>
                </tr>
                <tr>
                    <th scope="row">Hooks</th>
                    <td>27</td>
                </tr>
                <tr>
                    <th scope="row">Pellets</th>
                    <td>623</td>
                </tr>
            </tbody>
        </table>
        
Columns
    
    colgroup
        * a logical grouping of one or more columns in a table
        * gives you more styling hooks when appropriate
        * uses a conditional content mdoel, which means the rules are based on the condition of the
            element--if span is defined, then the element should be empty
        * if span is not in use, then colgroup must contain one or more col elements
        * Example:
        
            <table>
                <colgroup>
                    <col>
                </colgroup>
                <colgroup span="2">
                <colgroup>
                    <col>
                    <col>
                </colgroup>
                <thead>
                    ...
                    
        Required Attributes: None
        Optional Attributes: span - positive integer, how many columns the colgroup contains
        
    col
        * A void element with no content, representing one or more columns in a column group
        * Appears as a child of a colgroup element that lacks a span attribute
        * No end tag, can be self closing
        
        Required Attributes: None
        Optional Attributes: span - positive integer, how many columns the col spans
        
One more thing...
    
    caption
        * Defines a title for its parent table element
        * accepts flow elements as children, no implied restriction on content length
        * Example:
        
            <table> 
                <caption>
                    <h2>A caption!</h2>
                    <p>Some stuff.</p>
                </caption>
                <thead>
                    ...
                    
        Required Attributes: None
        Optional Attributes: None
        
Styling Tables with CSS
    * processed according to the 'CSS table model', which defines display characteristics for tables
    * Most values of the CSS display property are block and inline, but the following apply to tables:
        table
        inline-table
        table-header-group
        table-row-group
        table-footer-group
        table-row
        table-cell
        table-column
        table-column-group
        table-caption
        
    * Example HTML:
    
        <table>
            <thead>
                <tr>
                    <th scope="col">Product</th>
                    <th scope="col">Quantity</th>
                    <th scope="col">Price</th>
                    <th scope="col">Totals</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <th scope="row">Utility Belts</th>
                    <td>9</td>
                    <td>$129.99</td>
                    <td>$1,169.91</td>
                </tr>
                <tr>
                    <th scope="row">Grappling Hooks</th>
                    <td>27</td>
                    <td>$79.99</td>
                    <td>$2,159.73</td>
                </tr>
                <tr>
                    <th scope="row">Smoke Pellets</th>
                    <td>623</td>
                    <td>$4.99</td>
                    <td></td>
                    <td>$6,438.41</td>
                </tr>
            </tbody>
            <tfoot>
                <tr>
                    <th scope="row">Totals</th>
                    <td>659</td>
                    <td></td>
                    <td>$6,438.41</td>
                </tr>
            <tfoot>
        </table>
        
    * Example CSS:
    
        table {
            width: 600px;
            font-size: 14px;
            font-family: Helvetica, Arial, sans-serif;
            border-collapse: separate;
            border-spacing: 10px 5px;
            table-layout: auto;
            empty-cells: show;
        }
        
        thead th,
        tfoot th,
        tfoot td {
            background: #EEEEEE;
        }
        
        th,
        td {
            border: 1px solid #CCCCCC;
            padding: 10px;
        }
        
        thead th:first-child {
            text-align: left;
        }
        
        tbody th,
        tfoot th {
            text-align: left;
        }
        
        tbody tr:nth-child(even) {
            background: #DDDDDD;
        }    
        
    The border-collapse property
        * Determines the table's border model
        * Possible values are collapse, separate, and inherit
        * collapse will trigger the table's collapsing border model, where space between cells is removed
        * separate triggers the separated borders model, where each table cell is spaced apart
        
    The border-spacing property
        * controls the amount of separation between the borders of adjacent cells
        * Can accept one or two length values (or a value of inherit)
        * If one value is given, it's used equally on all sides, two values are horizontal and vertical
        * No official default, but most browsers will add two pixels of spacing
        
    The empty-cells property
        * tells the browser whether or not to render styling on cells that have no content
        * values are show, hide, and inherit -- show is typically the default
        
    The table-layout property
        * determines which layout algorithm a browser should use to render the table
        * values are fixed, auto, and inherit
        * fixed uses the fixed table layout algorithm, which relies only on the table's overall
            width, from css or inferred from content, and divides equally among all columns
        * auto takes into account the overall width of the table, contents of each cell, and any
            specified cell or column widths and divides widths amongst columns with a browser
            specific algorithm.  auto is the default value
            
    The :first-child and :nth-child pseudo-classes
        * :first-child and :nth-child are structural pseudo-classes that select elements based
            on their locations in the markup
        * :first-child refers to an element that is the first child of another element
        * :nth-child matches an element or set of elements based on the keyword or formula passed
            to it in parentheses. Keywords are primarily 'even' and 'odd', equivalent to 2n and 2n+1
            
    Styling Columns
        * Add the following to the markup between table and thead:
        
            <colgroup>
                <col id="products">
                <col id="quantities">
                <col id="prices">
                <col id="totals">
            </colgroup>
            
        * Add this for styling the column groupings:
    
            #quantities {
                width: 200px;
            }
            
            #prices {
                background: #DDDDDD;
            }        
            
        * The third column of the footer row will retain its background color despite the
            prices column having a background color added to it, because of 'table layer stacking'
        * There are six layers of stacking. Assume each of the following has a unique background color:
            1.  The lowest layer, the table element itself, is superseded by column groups
            2.  Column groups, in turn, are superseded by columns
            3.  Columns lose out to row groups
            4.  Row groups lose to individual rows
            5.  cells are highest priority
            
    Styling Captions
        * Addition to the html:
        
            <caption>
                <h2>Power Outfitters Inventory</h2>
                <p>Power Outfitters continues to stock only the finest products.</p>
            </caption>
            
        * Addition to the css:
        
            caption {
                background: #444444;
                caption-side: top;
                color: #FFFFFF;
                font-weight: bold;
                line-height: 1.4;
                margin: 0 5px;
                padding: 15px;
            }
            
            caption h2 {
                font-size: 20px;
                margin: 0 0 10px 0;
            }
            
            caption p {
                font-size: 16px;
                margin: 0;
            }
            
        The caption-side property
            * Accepts one of three values: top, bottom, inherit
            * Default is top
            * Determines where on the table the caption displays
            

Chapter 8: Assembling Forms and Applications

How Forms Work
    * Form is any section of a page where a user can input information
    * Interaction points are 'controls', data held by them is their 'value'
    * To modify the value of a control, a user brings it into 'focus' to make it active and ready for input
    * A value is entered, then focus shifts to a new control
    * Forms aren't complete until submitted, when the information entered is sent to the server
        in a 'form data set' of key value pairs
    * On the server end, the data is processed by a 'form handler' script, which optionally validates input
    
The form Element
    * Defines a portion of an HTML document that can receive input from the user
    * Container for other interactive form elements, and anything else needed to give them form structure
    * form element is flow content, and can contain any other flow elements except form
    * Multiple forms in a page each must have their own form element
    * As of HTML5 you can associate a control anywhere on a page with a specific form
    * That's not entirely cross browser safe yet.
    * The 'action' attribute has the url of the form handler
    * If no action is provided, the browser assumes the form handler is the current document
    * A method attribute lets you specify get or post
    
    Required Attributes: None
    Optional Attributes:
        accept-charset - the accepted character encoding for data submitted through the form
        action - the url of the form handler
        autocomplete - new in HTML5, specifies whether browsers should be allowed to autocomplete in the form
        enctype - the type of encoding to use when the form is submitted, can be one of:
            application/x-www-form-urlencoded (default)
            multipart/form-data (if the submit includes files from an input type="file" control)
            text/plain (no additional encoding is done)
        method - which http method will be used for the submit, get or post
        novalidate - indicates the form should not be validated when submitted, new in HTML5
        
The input Element
    * Most form controls are input elements, with a type attribute set
    * All inputs must have a name attribute to form a key value pair
    * There are a number of input types, some new to HTML5
    
    Required Attributes: name - identifies the form control in key/value pair submitted data
    Optional Attributes:
        accept - a comma-separated list of accepted file MIME types (only for input type="file")
        alt - an alternative text description for an image (only for input type="image")
        autocomplete - new in HTML5, tells the browser it's ok to autocomplete, can be 'on' or 'off'
        autofocus - boolean, new in HTML5, sets first focus point when the page loads
        checked - boolean, sets an initial checked state for checkboxes and radio buttons
        disabled - boolean, disables the form control
        form - new in HTML5, allows the label to be associated with one or more additional forms
        formaction - new in HTML5, overrides the form's action attribute, value is the url of the form handler
        formenctype - new in HTML5, overrides the form's enctype attribute
        formmethod - new in HTML5, overrides the form's method for sending data
        formnovalidate - boolean, new in HTML5, allows a form to be submitted while bypassing validation
            (only valid for input type="submit"), putting it on some buttons but not others would allow
            you to, for instance, have a 'save' button that submitted a partially completed form
        formtarget - new in HTML5, overrides the form's target attribute (only for input type="submit")
        height - new in HTML5, height of an input type="image" in pixels or as a percentage
        ismap - boolean, says control is a server side image map (input type="image")
        list - new in HTML5, references the ID of a datalist element that contains options for the control
        max - new in HTML5, max value for a control, either a number, date, or time
        maxlength - max number of characters that can be entered in a text field
        min - new in HTML5, min value allowed for a control, either a number, date or time
        multiple - new in HTML5, boolean, indicates that multiple values can be entered, typically used
            in combination with a datalist element
        pattern - new in HTML5, lets an author define a regular expression against which the input's value
            can be checked
        placeholder - new in HTML5, lets the author include a short text hint to advise the user on
            what value is expected for the input--disappears on focus or typing
        readonly - control may only display an initial value and can't be modified
        required - new in HTML5, boolean, indicates the control must have a value to be submitted
        size - width of a text control as a number of characters
        src - source url of an image file (for input type="image")
        step - new in HTML5, specifies the number intervals for a numeric input (input type="number")
        tabindex - by number, the control's position in the tabbing order
        type - the type of form control the input element represents
        usemap - the url of a client-side image map (input type="image")
        value - the initial value of a control before it is modified by the user
        width - new in HTML5, the width of an input type="image" in pixels or a percentage
    
    input type="text"
        * single line text entry field
        * may use an optional maxlength attribute
        * value attribute lets you set the initial text of the field
        
    input type="search"
        * new in HTML5
        * lets browsers treat those fields differently for autocomplete purposes
        * older browsers will treat it as a text field
        
    input type="password"
        * similar to a text field, but obscures the entered text with asterisks or dots
        * extremely light security, you should still send the request over https
        
    Special text: URLs, Email Addresses, and Phone Numbers
        * HTML5 has specialized input types for urls, email addresses, and phone numbers:
            input type="url"
            input type="email"
            input type="tel"
        * Does some basic validation for free, though not all browsers will do it
        * type="tel" will cause smartphones to bring up a numeric keypad
        
    Dates and Times
        * HTML5 gives a number of input types built for collecting date and time data
        * input type="date" wants a complete date comprising year, month, day
        * input type="datetime" wants year, month, day, hours, minutes, and UTC
        * input type="datetime-local" is same as datetime, minus timezone
        * input type="month" just wants year and month
        * input type="week" year and calendar week, give as a number
        * input type="time" wants hours and minutes but not seconds, with no timezone
        
        * Most of those aren't very cross browser friendly yet
        * Build to support a JS date/time picker for browsers without builtins
        
    input type="color"
        * new in HTML5, lets a user provide a color value via a color picker interface
        * input's value is a hex color code
        * graphical interface is left to the browser
        * implement a js color picker for browsers with no native widget
        
    input type="number"
        * new in HTML5, has somewhat wide browser support
        * some mobile browsers automatically invoke a numeric keyboard for number inputs
        * desktop browsers will typically render the control with a set of up and down arrows
        * you can specify an increment in the step attribute, and min and max via attributes
        * won't accept nonnumeric characters except . and -
        * not for arbitrary numerals, specifically for indicating a count for calculation purposes
        
    input type="range"
        * generates a slider widget, useful for entering numbers where the precise value isn't important
        * default range is 0 to 100, but you can set min, max, and step via attributes
        * user won't see actual number generated by the control
        * supported in Opera, Safari, Chrome, and IE 10, but not FF as of publishing
        * non supporting browsers default to a text input, so use a js slider for them
        * rendered slider isn't susceptible to css much, except for width
        
    input type="checkbox"
        * choice toggle with a checkable box, used when several options are available and more
            than one can be selected, or to represent one binary action
        * may have a value attribute, which is what will be passed if it's checked
        * otherwise it'll submit 'on' or nothing
        * the boolean checked attribute will check the box
        
    input type="radio"
        * like a checkbox, but only one of the possible choices can be selected
        
    input type="file"
        * renders a file upload control
        * loads a file, puts its path into the rendered text field
        * can include an optional accept attribute, where the value is a comma separated list of
            accepted MIME types
            
    input type="submit"
        * creates a button that will submit the entire form data set
        * set the button text via the value attribute
        
    input type="reset"
        * generates a button that resets the entire form
        * rarely useful
        
    input type="button"
        * no inherent function, just exists to trigger a client side script
        * value attribute sets the text
        * probably want to just use js to generate the button rather than add it to the markup
        
    input type="image"
        * behaves like a submit button
        * lets you substitute the standard button with a graphic
        * requires a src attribute for the image url, and an alt attribute
        
    input type="hidden"
        * not rendered in the page, lets you pass along extra data with the submitted form
        
    More Form Controls
        
        select
            * creates a selection control--menu of options to choose from
            * either does a drop down or multi line select
            * boolean attribute multiple lets it do multiple select
            * width is set by the widest option in the list, but can be modified with css
            * select is a non empty element that requires an end tag, is a container for option elements
            
            Required Attributes: name - name of the form element
            Optional Attributes:
                autofocus - boolean, new in HTML5, sets the button to automatically get focus on load
                disabled - boolean, turns it off
                form - lets the control be associated with one or more additional forms
                multiple - boolean, lets you choose multiple options
                required - new in HTML5, boolean, makes it required to choose a value
                size - the height of a multi-line select in number of lines
                
        option
            * each option in a select is an option element
            * can also as of HTML5 show up in a datalist element
            * nonempty element, requires an end tag, can only contain text
            * can be preselected with a boolean selected attribute
            * has a value attribute to be passed on
            
            Required Attributes: none
            Optional Attributes:
                disabled
                label - a shorter alternative text label, displayed in place of the element's contents
                selected
                value
                
        optgroup
            * collection of option elements, can only contain option elements, cannot be nested
            * label attribute sets the display name of the optgroup
            * setting disabled on the optgroup will disable the entire group
            
            Required Attributes: label - sets the display name
            Optional Attributes: disabled
            
        textarea
            * Multiline text entry field
            * set size with CSS or via optional rows and cols attributes
            * Nonempty element, requires an end tag, can contain only text
            
            Required Attributes: name
            Optional Attributes:
                autofocus
                cols - number of cols wide in characters
                dirname - new in HTML5, allows the control to indicate the directionality of its text
                disabled
                form
                maxlength
                placeholder
                readonly
                required
                rows - number of rows high in lineheights
                wrap - sets how the text value should be wrapped when the form is submitted, can be
                    one of 'soft' (text not wrapped at submission) or 'hard' (the browser inserts
                    returns at the textarea's column width to force long lines to wrap. new in HTML5
                    
        datalist
            * new in HTML5
            * contains a set of suggested, predefined values for an input element that appear 
                as a list of options
            * unlike select, can accept values not in its list of possibles
            * using the datalist element with an input element combines a freeform text field and a select
            * can associate an input element with a datalist via the list attribute, whose value is
                the id of the datalist element you're targeting
            * each option in the datalist is an option element, can't contain anything else
            * inside a datalist, option no longer requires an end tag, is a void element, but must have 
                a value attribute if it doesn't contain text
            * if an option has a value and content, the content will display but the value will be passed
            * an option with no text content CAN NOT be self closing
            
            Required Attributes: id, so it can be used as the value of a list attribute elsewhere
            Optional Attributes: none
            
        button
            * works like a submit, reset, or button input, or even an input type="image"
            * Activating a button element will submit or reset the form, or trigger a scripted response
            * requires a type attribute, set to submit, reset, or button
            * Can contain text or other elements, and must hold some content, requires an end tag
            * contents can be styled with css, so it can look fancy
            
            Required Attributes: type - submit, reset, or button
            Optional Attributes:
                autofocus
                disabled
                form
                formaction - new in HTML5, overrides the form's action (for button type=submit)
                formenctype - new in HTML5, overrides the form's encoding type
                formmethod - new in HTML5, overrides the form's method
                formnovalidate - new in HTML5, boolean, submits while bypassing validation
                formtarget - new in HTML5, overrides the form's target
                value - value of the button to be submitted with form data
                
        keygen
            * generates a pair of encryption keys when the form is submitted, one public, sent to
                the form handler for use by the website, the other private and stored locally
            * never worked (or will work) with IE
            * Just use SSL/TLS
            
Structuring Forms
    
    fieldset
        * a set of related controls, collected in a logical grouping
        * example:
        
            <form>
                <fieldset>
                    <legend>Some controls!</legend>
                    <p>
                        <input type="email" name="email" id="email" required>
                        <button type="submit">Subscribe</button>
                    </p>
                </fieldset>
            </form>
            
        Required Attributes: None
        Optional Attributes: None
        
    legend
        * text title or caption for a fieldset, must be the first child of a fieldset element
        * PITA to style with CSS
                
        Required Attributes: None
        Optional Attributes: None

    label
        * text label for a specific control
        * may enclose both the control and its text label, which connects the two only contextually
        * alternately, use a for attribute with the control's id to associate them
        * a label associated with a control is clickable in the same way the control is
        * labels are really important for screen reader software
        
        Required Attributes: None
        Optional Attributes:
            for - associates the label with a single control when the attribute's value matches
                the control's id
            form - new in HTML5, ties the label to one or more additional forms
            
Displaying Output
    
    output
        * Displays the result of a calculation in a form, like a total price or an interest rate
        * By itself it doesn't do much, but it's much more semantically useful than input/span/div
        * the for attribute carries the ids of the controls that contributed to its value
        * example:
        
            <form oninput="sum.value = parseInt(a.value) + parseInt(b.value)">
                <input name="a" id="a" type="number"> +
                <input name="b" id="b" type="number"> =
                <output name="sum" for="a b"></output>
            </form>
            
        Required Attributes: None
        Optional Attributes:
            for - space separated list of ids of form controls that contributed to the value
            form
            name
            
    meter
        * new in HTML5, represents a measurement on any scale with a known range, meaning the scale
            has both a minimum and a maximum
        * Anything that can be expressed as a number on a finite scale could be expressed with a meter element
        * uses the phrasing content model, requires a start and end tag
        * can appear anywhere where flow content is allowed, not exclusive to forms but can be form related
        * contents should indicate the same measurement as its value attribute
        * basic example:
        
            <p>Rating: <meter value="0.75">0.75</meter></p>
            
        * Default scale is 0 to 1
        * You can set min and max values explicitly:
            
            <p>Rating: <meter min="0" max="5" value="4">4 out of 5</meter></p>
            
        * Contents don't have to be a number, but should reflect the same thing as the value
        * min must be present if value is less than 0, max if it exceeds 1--min/max can be negative
        * also lets you give high, low, and optimum attribute values, to indicate quality:
        
            <p>Your score: <meter min="0" max="100" value="63" low="20" high="80" optimum="60">
                63%, slightly above average</meter></p>
                
        Required Attributes: value - the current numeric value
        Optional Attributes:
            min - lower numeric boundary of the measured range
            max - upper numeric boundary of the measured range
            low - upper numeric bound of the low end of the range
            high - lower numeric bound of the high end of the range
            optimum - optimal numeric value, can be anywhere in the range
            form - associates it with a form or forms
            
    progress
        * new in HTML5, similar to meter, represents the current stage in the completion of a task
        * most useful in combination with javascript to dynamically update its value
        * min is always zero, cannot be set by attribute
        * max can be set by attribute to an integer, defaults to 1
        * phrasing element, requires a start and end tag
        * Examples:
        
            <p>Upload: <progress>starting...</progress></p>
            <p>Processing: <progress max="100" value="77">77%</progress></p>
            <p>Check out: <progress max="5" value="3">Step 3 of 5</progress></p>
            
        * Styling with CSS is difficult and inconsistent
        * Not every browser supports it
        
        Required Attributes: None
        Optional Attributes: value and max
        
Interactive Elements

    details and summary
        * details represents a collapsible block of content from which a user can obtain additional
            information or, when uesd in a form or application, additional controls or interactivity
        * details can contain any kind of content or other elements, including nested details elements
        * makes expand/collapse native to browsers that support it instead of JS dependent, but you
            still have to do JS expand/collapse for legacy browsers
        * Example:
        
            <div class="item">
                <h3>A thing!</h3>
                <p>Some stuff about the thing.</p>
                <details>
                    <summary>Deeper details.</summary>
                    <dl>
                        <dt>Thing One</dt>
                        <dd>Explanation One</dd>
                        <dt>Thing Two</dt>
                        <dd>Explanation Two</dd>
                    </dl>
                </details>
            </div>
            
        * nested summary element is a title or legend for its parent details element
        
        Required Attributes: None
        Optional Attributes: open - boolean indicating details element should be open on page load
        
    menu
        * represents a list of commands or actions the user can trigger
        * might be presented in a right click menu, as a menu in the browser's toolbar, or a list on the page
        * You can indicate the type of menu with the optional type attribute, which takes the values
            context, toolbar, or list, with list being the default type
        * No browsers implement this element currently.
        
    command
        * An executable command in a menu element
        
Styling Forms with CSS
    * General rule--don't make forms confusing by changing their visual language
    
    Removing the Border from fieldsets
        * If you set the border to none it'll ditch the border, and padding set to 0 will kill the padding
        
    Aligning Labels
        * labels are phrasing content and styled as inline, so they're only as wide as their text content
        * You can float: left them, which will display them as block but allow content to flow up to them
        * Once they're floated, making them all the same width will push content to the right
        * Example that converts labels to floating blocks 200px wide:
        
            label {
                float: left;
                width: 200px;
                text-align: right;
                margin-right: 15px;
            }
            
        * Alternately, you can put them above their inputs:
        
            label {
                display: block;
                margin-bottom: 0.25em;
            }
            
    Changing Fonts in Form Controls
        * Browsers typically don't allow form text to inherit styling from bodies
        * If you want your form elements to share your body fonts, you can do:
        
            input, select, textarea, button {
                font-family: inherit;
                font-size: inherit;
            }
            
Chapter 9: Page Layout with CSS

The Box Model
    * Block level elements are rendered using the box model
    * Terms are:
        Margin - area between the border and surrounding elements
        Border - area between padding and margin
        padding - area between content area and border
        content area - area inside the padding, that has width and height
        
    * Width and height apply only to the content area of the box
    * Dimensions are set to auto by default, which lets the browser calculate the size automatically
    * Can also set it to a percentage of the parent element, or a length in px, pt, pc, in, cm, mm, em, ex
    * If the contents overflow the dimensions of the box, they will go outside the boundaries
    * Text will wrap to the width you specify, with long, unwrapping words overflowing horizontally
    * Text is rendered differently in different browsers, so exact spacing won't be browser safe
    
    Margins and Padding
        * Margins are transparent space between the outside edge of a box and the content or elements around it
        * You can specify margins for each side of a box separately with margin-top, -bottom, -left, -right
        * The combined 'margin' property can set all sides to the same value, or to top right bottom left
        * With two values, first is top and bottom, second is left and right
        * Three values, first sets top, second sets right and left, third sets bottom        
        * Padding is the space between the content area and the border, and can be specified like margins
        
    Borders
        * Borders are decorative lines drawn around the outside of a box, and has three characteristics:
            width, style, and color
        * Each can be declared separately for each side of a box with
            border-top-width
            border-top-style
            border-top-color
            [...]
            border-left-color
            
        * All four sides can be declared at once with the shorthand border property
        * Order of the values for the border property doesn't matter
        * You can set width, style and color individually, and set values for each side separately, with
            border-width: value1 value2 value3 value4;
        * Widths cannot be set as percentages, but you can use any measure, or 'thin', 'medium', or 'thick'
        * Border styles are:
            none - no border
            hidden - no border, but can resolve some rendering conflicts in a table
            dotted - a line of evenly spaced dots
            dashed - a dashed line
            solid - a solid line
            double - two solid parallel lines
            groove - a solid border with highlights and shading as if engraved into the surface
            ridge - opposite of groove, pops out of the page a little
            inset - appears as though the box is inset into the page
            outset - opposite of inset, box appears raised from the page surface
            
Page Width: Fixed vs Liquid
    * Will your design adjust to fit the width of the browser window or remain fixed?
    
    Fixed Width
        * Also called a 'static' layout, has its overall width declared in an absolute unit of measure
        * Easier to build--rigid and predictable, a pixel is always a pixel
        
    Liquid Width
        * Also called 'fluid' or 'dynamic', has its overall width declared in percentages
        * Outermost element is given a width that's a percentage of the browser window
        * Require additional planning and testing to build in allowances
        
Floating Columns
    * Most pages are put into more than one vertical column
    * Unless otherwise specified, block level elements stack one on top of another in their flow order
    * The original purpose of 'float' was to wrap text around an image.
    * A floated element is partially removed from the normal flow of content and shifted to the left
        or right as far as it will go, until it runs into the edge of its containing box (inside any
        padding or border) or into another floated element. Content after a float flows up and around it.
        
    * Example markup for this section:
        
        <section class="main">
            <h1>Welcome, Heroes!</h1>
            
            <p>Power Outfitters offers top of the line merchandise at rock-bottom prices for the discerning costumed crime-fighter. From belts to boomerangs, we're your one-stop shop for all your specialized gadgetry and costuming needs.</p>
            
            <p>Come browse our wide selection of capes, cowls, masks, boots, belts, gloves, tights, unitards, and leotards in all the colors of the rainbow. Our clothiers are on call 24 hours a day, always ready in a pinch to replace a singed cloak or patch a ripped tunic, because we know crime doesn't sleep and justice can never rest.</p>
        </section>
        
        <section class="extra">
            <p><strong>Power Outfitters</strong>
            <br>616 Kirby Ave, between Romita and Ditko
            <br>Mon-Thu: 8am-10pm
            <br>Fri-Sun: 8am-12pm
            <br>24-hour service and repair: call 555-1961</p>
        </section>
        
        <footer>
            <p>Proud purveyors of practical paraphenalia for the contemporary costumed crime-fighter</p>
            <p>Copyright &copy; 2011-2012 Power Outfitters</p>
        </footer>

        
    * Example CSS:
    
        .main {
            width: 52%;
            float: left;
            background-color: #E6F2F9;
            padding: 15px 3%;
        }
        
        .extra {
            width: 32%;
            float: right;
            background-color: #C3DEEE;
            padding: 15px 3%;
        }
        
        footer { clear: both; }
        
        
    * If you let your floated elements combine to exceed the width of their container, they will break 
        according to their flow order
    
Clearing Floats
    * Adding content outside the floating boxes will cause that content to intermingle with it
    * When two adjacent boxes are both floating, nothing tells the browser where to draw their lower boundary
    * Content will flow upward into whatever space is available
    * To fix, you have to clear the floats by drawing an invisible line across their lower border, beyond
        which no content will flow.
    * The clear property tells the browser not to allow any floats to descend below the element, nor
        any content to flow above it
    * clear property takes four values: 
        left - clear on the left side, while the right side flows normally
        right - clear to the right side while the left flows normally
        both - clear content to both sides
        none - don't clear floats, used to override previous rules
        
    * Using clear is the way to clear floats, but sometimes you don't have an element to carry that property
    * Example:
    
        <section id="content">
            <section class="main">
                <!-- content -->
            </section>
            <section class="extra">
                <!-- content -->
            </section>
        </section>
        
    * Without a declared height, an element will be the height of its contents plus padding/borders
    * Floats allow content to flow around them, so if there's nothing in the "content" element, the
        container has no height at all and will collapse vertically, as if it were empty
    * Floated children will spill out the bottom, and uncleared content that comes after will flow
        up around those protruding floats
    * You could fix that with an empty element inside the container that cleared the floats, but that
        would be entirely presentational markup with no semantic meaning
        
Floats Within Floats
    * A floating element will automatically expand to contain any floating elements inside it
    * Floating the outer container to the left or right clears its inner floating boxes, and the
        container expands to enclose them
    * This works, but you'd still need clearing on anything below the outer container
    
Overflow
    * If floating the container isn't possible, you can apply an overflow property set to hidden or auto
    * overflow tells a browser how to deal with content that's too big for its container
    * Block level elements with no declared with or height will automatically expand vertically to
        enclose its contents, and expand horizontally to fill its container.
    * If you declare an explicit width or height to override that standard rendering, the browser needs
        to know what to do with overflowing content.
    * 'overflow' can be set to: 
        visible - default value / behavior
        hidden - content is hidden beyond the edge of the container
        scroll - adds scrollbars in both directions
        auto - overflowing content invokes scroll bars when necessary
    * Side effect of altering an element's overflow property: setting to hidden or auto when the element
        contains floats will make that element expand around its floating children--sort of reminds the element
    * Setting #content { overflow: auto; } makes the browser expand around the floating boxes
    * Using overflow to contain floats may have negative side effects if the content is too wide rather than tall
    
Generated Content
    * CSS level 2 includes the :after pseudo selector and the content property, to generate content
    * You can combine these to clear floats without additional markup
    * :after selects an imaginary element immediately after the reference element
    * content property renders the text of its value onto the page at the position of the selected element
    * generated content doesn't exist in the document, it's just displayed, so only appropriate for
        decorative or presentational content, never for meaningful/accessible stuff
    * Presentational pseudo-element at the end of the containing block, to clear the floats above it:
    
        #content:after {
            content: '.';
            display: block;
            clear: both;
            height: 0;
            visibility: hidden;
        }
        
    * Well supported by modern browsers, browsers more than a decade old need a diff technique
    
Positioning Elements
    * The position property, along with left, right, top and bottom, help move a positioned element on the page
    * position accepts four values:
        static - default, element has no special positioning
        relative
        absolute
        fixed
        
    Relative Positioning
        * A relatively positioned element will initially be laid out according to the normal content flow
        * From there you can shift it to a different position with left, right, top, or bottom
        * Those take either a percentage, a length, or 'auto' to reset to the flow pattern
        * Repositioning is 'relative' to where it would otherwise have been placed 
        
    Absolute Positioning
        * A step farther than relative positioning, lets you completely remove an element from the normal
            flow of content and place it in any location
        * Other flow content acts as though the positioned element isn't there
        * Instead of offsetting the element relative to its starting position, top, right, left, and bottom
            place the element relative to its nearest positioned ancestor (first containing element that
            has any position value other than static)
        * If it has no positioned ancestors, the positioning context is the browser window itself
        * By adding position: relative to a parent element, you can have absolute position in relation
            to that element's bounding box, instead of the browser
        * Padding in the parent is included in the box for the purposes of positioning an absolute element,
            though it will be placed inside any border or margin--placed relative to the 'calculated edge'
        * If the absolute element is taller than its container, it will overlap (not overflow) it vertically
        * You can't 'clear' a positioned element to make the containing element expand for it
        * Fix is to set the min-height of the containing element, so it is at least as tall as the element
        * Block level elements, once removed from their parent's context, forget how wide to be--set the width
        
    Fixed Positioning
        * element is placed at a precise location in the browser window, stays fixed to that spot, independent
            of the user resizing or scrolling the browser
        * removes the element from the normal content flow
        * positioning context is always the browser window
        * without a declared width, fixed elements collapse to the width of their contents
        * should probably add padding or other spacing to the place where the fixed element will appear on load
        * Not supported in IE prior to 7
        
