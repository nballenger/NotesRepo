##########################################################

From JavaScript Enlightenment, by Cody Lindley:

Chapter 1
* In JS, methods are properties that contain a Function() object intended to operate on the object the function is contained within.

* Creating objects with Object() vs Person() only really has prototype implications--otherwise the resulting object will be functionally the same.

* With 'new', the value of 'this' is set to the new object, and 'this' is returned by default ( Explanation from elsewhere that I prefer:
  1.  New, anonymous object is created, with its prototype set to the constructor's prototype
  2.  'this' is set to point at the new, anonymous object
  3.  The constructor function is run (you can use 'this' or not in the function body)
  4.  'this' or the explicit return value of the constructor is returned )
* The nine native object constructors of JavaScript:
  Number()
  String()
  Boolean()
  Object()
  Array()
  Function()
  Date()
  RegExp()
  Error()

* The Math object is a static object rather than a constructor function--really it's an object namespace for math functions, not a prototype itself.

* If you call a constructor without 'new', 'this' refers to the global object

* You can instantiate an object instance from any of the native constructor functions:

  var myNumber    = new Number(23),
      myString    = new String('male'),
      myBoolean   = new Boolean(false),
      myObject    = new Object(),
      myArray     = new Array('a','b'),
      myFunction  = new Function('x','y', 'return x*y'),
      myDate      = new Date(),
      myRegExp    = new RegExp('\bt[a-z]+\b'),
      myError     = new Error('Oh no!');

* Values like: 5, 'foo', true, false, null, undefined are primitive because they are 'irreducible'--they are not values that can be made up of other values.

* typeof returns object for everything but functions and regexp:

  var myNumber    = new Number(23),
      myString    = new String('male'),
      myBoolean   = new Boolean(false),
      myObject    = new Object(),
      myArray     = new Array('a','b'),
      myFunction  = new Function('x','y', 'return x*y'),
      myDate      = new Date(),
      myRegExp    = new RegExp('\bt[a-z]+\b'),
      myError     = new Error('Oh no!');

  // logs 'object object object object function object function object'
  console.log(
      typeof myNumber,
      typeof myString,
      typeof myBoolean,
      typeof myObject,
      typeof myArray,
      typeof myFunction,      // typeof returns 'function' for all function objs
      typeof myDate,
      typeof myRegExp,        // typeof returns 'function' for RegExp()
      typeof myError
  );

* 'primitive values are stored and manipulated at "face value." [...] if I store the string value "foo" in a variable called myString, the value "foo" is literally stored in memory as such.'

* Primitive values are copied literally--if you change the original value, the copy is unchanged



##########################################################
